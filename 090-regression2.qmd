
# Geradenmodelle 2




## Lernsteuerung




### Standort im Lernpfad

Abb. @fig-ueberblick zeigt den Standort dieses Kapitels im Lernpfad und gibt damit einen √úberblick √ºber das Thema dieses Kapitels im Kontext aller Kapitel.







### Lernziele


- Sie k√∂nnen Regressionsmodelle f√ºr Forschungsfragen mit bin√§rer, nominaler und metrischer UV erl√§utern und in R anwenden.
- Sie k√∂nnen Interaktionseffekte in Regressionsmodellen erl√§utern und in R anwenden.
- Sie k√∂nnen den Anwendungszweck von Zentrieren und z-Transformationen zur besseren Interpretation von Regressionsmodellen erl√§utern und in R anwenden.
- Sie k√∂nnen Modelle nutzen, um Vorhersagen anhand neuer Daten zu erstellen.


### Ben√∂tigte R-Pakete

```{r}
#| message: false
library(tidyverse)
library(yardstick)  # f√ºr Modellg√ºte im Test-Sample
library(easystats)
library(ggpubr)  # Daten visualisieren
library(openintro)  # dataset mariokart
```


```{r libs-hidden}
#| include: false
library(ggpubr)
library(plotly)
library(scatterplot3d)

source("children/colors.R")
```









{{< include children/colors.qmd >}}



### Ben√∂tigte Daten



::: {.content-visible when-format="html"}

```{r import-mariokart-csv}
mariokart_path <- "https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv"
mariokart <- read.csv(mariokart_path)

wetter_path <- "https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/wetter-dwd/precip_temp_DWD.csv"
wetter <- read.csv(wetter_path)
```
:::


::: {.content-visible when-format="pdf"}

@lst-mario-path definiert den Pfad zum Datensatz `mariokart` und importiert die zugeh√∂rige CSV-Datei in R, so dass wir einen Tibble mit Namen `mariokart` erhalten.


```{r import-mariokart-csv2}
mariokart_path <- paste0(
  "https://vincentarelbundock.github.io/Rdatasets/",
  "csv/openintro/mariokart.csv")
mariokart <- read.csv(mariokart_path)

wetter_path <- paste0( "https://raw.githubusercontent.com/sebastiansauer/",
"Lehre/main/data/wetter-dwd/precip_temp_DWD.csv")
wetter <- read.csv(wetter_path)
```

:::



{{< downloadthis daten/wetter.csv dname = "wetter.csv" >}}

Die Wetterdaten stammen vom [DWD](https://opendata.dwd.de/).^[Lizenzhinweis: Datenbasis: Deutscher Wetterdienst, eigene Elemente erg√§nzt.]


## Forschungsbezug: Gl√§serne Kunden


Lineare Modelle^[synonym: Regressionsanalysen] sind ein altes, aber m√§chtiges Werkzeug.
Sie geh√∂ren immernoch zum Standard-Repertoire moderner Analystis.

:::{#exm-kosinski}
### Wie gut kann man Ihre Pers√∂nlchkeit auf Basis des Facebook-Profils vorhersagen?

In einer Studie mit viel Medienresonanz untersuchten @Kosinski2013, wie gut Pers√∂nlichkeitsz√ºge durch Facebook-Daten (Likes etc.) vorhergesagt werden k√∂nnen.
Die Autoren res√ºmieren:

>   We show that easily accessible digital records of behavior, Facebook Likes, can be used to automatically and accurately predict a range of highly sensitive personal attributes including: sexual orientation, ethnicity, religious and political views, personality traits, intelligence, happiness, use of addictive substances, parental separation, age, and gender.

Die Autoren berichten √ºber hohe Modellg√ºte ($r$) zwischen den tats√§chlichen pers√∂nlichen Attributen und den vorhergesagten Werten Ihres Modells, s. @fig-pnas1.
Das eingesetzte statistische Modell beruht auf einem linearen Modell, also √§hnlich zu dem in diesem Kapitel vorgestellten Methoden.

Neben der analytischen St√§rke der Regressionsanalyse zeigt das Beispiel auch, wie gl√§sern Konsument:innen im Internet sind.$\square$
:::


![Prediction accuracy of regression for numeric attributes and traits expressed by the Pearson correlation coefficient between predicted and actual attribute values](img/pnas.kosinski.1218772110fig03.jpeg){#fig-pnas1 width="33%"}




## Wetter in Deutschland


:::{#exm-wetterdaten}
### Wetterdaten
Nachdem Sie einige Zeit als Datenanalyst bei dem Online-Auktionshaus gearbeitet haben, stand Ihnen der Sinn nach ewtas Abwechslung. 
Viel Geld verdienen und Ruhm und Anerkennung sind ja schon ganz nett,
aber dann fiel Ihnen ein, dass Sie ja zu Generation Z geh√∂ren, 
und daher den schn√∂den Mammon nicht so hoch sch√§tzen sollten.
Sie entschlie√üen sich, Ihre hochgesch√§tzten Analyse-Skills f√ºr etwas einzusetzen,
das Ihnen sinnvoll erscheint: Die Analyse des Klimawandels.

Beim [Deutschen Wetterdienst, DWD](https://www.dwd.de/DE/Home/home_node.html) haben Sie sich Wetterdaten von Deutschland heruntergeladen.
Nach etwas [Datenjudo, auf das wir hier nicht eingehen wollen](https://data-se.netlify.app/2022/07/24/preparing-german-weather-data/) 
resultiert ein sch√∂ner Datensatz, den Sie jetzt analysieren wollen^[Temperatur: Grad Celcius, Niederschlag (`precip`) mm Niederschlag pro Quadratmeter]:

::: {.content-visible when-format="html"}

```{r}
wetter_path <- "https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/wetter-dwd/precip_temp_DWD.csv"
wetter <- read.csv(wetter_path)
```
:::

::: {.content-visible when-format="pdf"}

```{r}
wetter_path <- paste0(
  "https://raw.githubusercontent.com/sebastiansauer/",
  "Lehre/main/data/wetter-dwd/precip_temp_DWD.csv")

wetter <- read.csv(wetter_path)
```
:::

Ein *Data-Dictionary* f√ºr den Datensatz k√∂nnen Sie [hier](https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/wetter-dwd/wetter-dwd-data-dict.md) herunterladen.^[<https://raw.githubusercontent.com/sebastiansauer/Lehre/main/data/wetter-dwd/wetter-dwd-data-dict.md>]


:::{.callout-note}
Ein *Data-Dictionary* (Codebook) erkl√§rt einen Datensatz.
Oft bedeutet das, das f√ºr jede Spalte der Datentabelle erkl√§rt wird,
was die Spalte bedeutet.$\square$
:::

<!-- In @tbl-wetter  kann man sich die Daten en Detail anschauen (Temperatur und Niederschlag im Zeitverlauf). -->

::::: {.content-visible when-format="html"}

@fig-wetter-anim zeigen die Daten von @tbl-wetter animiert.


::::{#fig-wetter-anim}

:::{.panel-tabset}

### Temperaturverlauf

![Temperatur (Grad Celcius) im Verlauf der Jahre](img/wetter1.gif)


### Niederschlagsverlauf

![Niederschlage (mm) im Verlauf der Jahre](img/wetter2.gif)

### Monatstemperaturverlauf

![Ver√§nderung der Temperatur pro Monat in Deutschland im Zeitverlauf (10-Jahres-Mittelwerte](img/wetter3.gif)

:::

Ver√§nderung der Temperatur und Niederschlag (10-Jahres-Mittel) in Deutschland im Verlauf des 20. Jahrhunderts

::::

:::::


Hervorragend! An die Arbeit!  

:::


### metrische UV

#### Modell Wetter1

Sie stellen sich nun folgende Forschungsfrage:

>    [üßë‚Äçüè´]{.content-visible when-format="html"}[\emoji{teacher}]{.content-visible when-format="pdf"} Um wieviel ist die Temperatur in Deutschland pro Jahr gestiegen, wenn man die letzten ca. 100 Jahre betrachtet?

Die Modellparameter von `lm_wetter1` sind in @tbl-lm-wetter1 zu sehen.

```{r}
#| results: hide
lm_wetter1 <- lm(temp ~ year, data = wetter)
parameters(lm_wetter1)
```

```{r}
#| echo: false
#| label: tbl-lm-wetter1
#| tbl-cap: "Modellparameter von lm_wetter1"
parameters(lm_wetter1) |> print_md()
```


Laut Ihrem Modell wurde es pro Jahr um 0.01 Grad w√§rmer, pro Jahrzehnt also 0.1 und pro Jahrhundert 1 Grad.


>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Das ist sicherlich nicht linear! Vermutlich ist die Temperatur bis 1950 konstant geblieben und jetzt knallt sie durch die Decke!

>    [üßë‚Äçüè´]{.content-visible when-format="html"}[\emoji{teacher}]{.content-visible when-format="pdf"} Mit der Ruhe, das schauen Sie sich sp√§ter an.



#### Punkt- vs. Bereichssch√§tzung

In tbl-lm-wetter1 finden sich zwei Arten von Information f√ºr den Wert des Achsenabschnitts (b0) und des Regressionsgewichts von `year`(b1):

1. *Punktsch√§tzungen* In der Spalte `Coefficient` sehen Sie den "Best-Guess" f√ºr den entsprechenden Koeffizienten in der Population. Das is sozusagen der Wert f√ºr den sich das Modell festlegen w√ºrde, wenn es sonst nichts sagen d√ºrfte.

2. *Bereichsch√§tzungen* Cleverer als Punktsch√§tzungen sind Bereichssch√§tzungen (Intervallsch√§tzungen): Hier wird ein Bereich plausibler Werte f√ºr den entsprechenden Wert angegeben. Der "Bereich plausibler Werte" wird auch als Konfidenzintervall (engl. confidence intervall, CI) bezeichnet. Entsprechend gibt `CI_low` die Untergrenze des Bereichs plausibler Werte und `CI_high` die Obergrenze aus. So k√∂nnen wir ablesen, dass das Regressionsgewicht von `year` irgendwo zwischen praktisch Null (0.009) und ca. 0.01 Grad gesch√§tzt wird.

üí° Merke: Je schmaler das Konfidenzintervall, desto genauer wird der Effekt gesch√§tzt.

#### Modell Wetter1a

Das Modell `lm_wetter1`, bzw. die Sch√§tzungen zu den erwarteten Werten, kann mich sich so ausgeben lassen, s. @fig-wetter1, links.
Allerdings sind das zu viele Datenpunkte. Wir sollten es vielleicht anders visualisieren, s. @fig-wetter1, rechts.
Dazu aggregieren wir die Messwerte eines Jahres zu jeweils einem Mittelwert.


```{r}
wetter_summ <-
  wetter %>% 
  group_by(year) %>% 
  summarise(temp = mean(temp),
            precip = mean(precip))  # precipitation: engl. f√ºr Niederschlag
```

Auf dieser Basis erstellen wir ein neues lineares Modell, s. @tbl-lm-wetter1a.

```{r}
#| results: hide
lm_wetter1a <- lm(temp ~ year, data = wetter_summ)
parameters(lm_wetter1a)
```

```{r}
#| echo: false
#| label: tbl-lm-wetter1a
#| tbl-cap: "Modellparameter von lm_wetter1a"
parameters(lm_wetter1a) %>% print_md()
```


```{r}
#| label: fig-wetter1
#| fig-cap: "Die Ver√§nderung der mittleren Temperatur in Deutschland im Zeitverlauf (Datenquelle: DWD)"
#| layout-ncol: 2
#| fig-subcap:
#|   - Jeder Punkt ist ein Tag (viel Overplotting, wenig n√ºtzlich)
#|   - Jeder Punkt ist ein Jahr (wetter_summ)
plot(estimate_relation(lm_wetter1)) 
plot(estimate_relation(lm_wetter1a))
```


>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Moment mal, der Achsenabschnitt liegt bei -15 Grad! Was soll das bitte bedeuten?


### UV zentrieren

Zur Erinnerung: Der Achsenabschnitt ($\beta_0$; engl. *intercept*) ist definiert als der Y-Wert an der Stelle X=0, s. @sec-interpret-reg-mod.


In den Wetterdaten w√§re Jahr=0 Christi Geburt. 
Da unsere Wetteraufzeichnung gerade mal ca. 150 Jahre in die Vergangenheit reicht,
ist es vollkommen vermessen, dass Modell 2000 Jahre in die Vergangenheit zu extraplieren,
ganz ohne dass wir daf√ºr Daten haben, s. @fig-extrapolation.


![Du sollst nicht ein Modell weit au√üerhalb seines Datenbereichs extrapolieren](img/extrapolating.png){#fig-extrapolation width=75%}

Sinnvoller ist es da, z.B. einen *Referenzwert* festzulegen, etwa 1950.
Wenn wir dann von allen Jahren 1950 abziehen, wird das Jahr 1950 zum neuen Jahr Null.
Damit bez√∂ge sich der Achsenabschnitt auf das Jahr 1950,
was Sinn macht, denn f√ºr dieses Jahr haben wir Daten.

Hat man nicht einen bestimmten Wert, der sich als Referenzwert anbietet,
so ist es √ºblich, z.B. den Mittelwert (der UV) als Referenzwert zu nehmen.
Diese Transformation bezeichnet man als *Zentrierung* (engl. centering) der Daten.

So zentriert man eine Verteilung:

```{r}
wetter <-
  wetter %>% 
  mutate(year_c = year - mean(year))  # "c" wie centered
```

Das mittlere Jahr in unserer Messwertereihe ist √ºbrigens 1951:

```{r}
wetter %>% 
  summarise(mean(year))
```

Die Steigung (d.h. der Regressionskoeffizient f√ºr `year_c`) bleibt unver√§ndert,
nur der Achsenabschnitt √§ndert sich, s. @tbl-lm_wetter1_zentriert.

```{r}
#| results: hide
lm_wetter1_zentriert <- lm(temp ~ year_c, data = wetter)
parameters(lm_wetter1_zentriert)
```


```{r}
#| echo: false
#| label: tbl-lm_wetter1_zentriert
#| tbl-cap: "Modellparameter von lm_wetter1_zentriert"
parameters(lm_wetter1_zentriert) %>% print_md()
```

Jetzt ist die Interpretation des Achsenabschnitts komfortabel:
Im Jahr 1951 (x=0) lag die mittlere Temperatur in Deutschland (laut DWD) bei ca. 8.5 Grad Celcius.
Die Regressionsgleichung lautet: `temp_pred = 8.49 + 0.01*year_c`.
In Worten: Wir sagen eine Temperatur vorher, die sich als Summe von 8.49 Grad plus 0.01 mal das Jahr (in zentrierter Form) berechnet.


:::{.callout-important}
### Referenzwert entspricht Null
Der Referenzwert bzw. der Wert der Referenzgruppe entspricht dem Y-Wert bei x=0 im Regressionsmodell.$\square$
:::

Wie gut erkl√§rt unser Modell die Daten?

```{r}
r2(lm_wetter1_zentriert)  # aus `{easystats}`
```

Viel Varianz des Wetters erkl√§rt das Modell mit `year_c`^[`year` und `year_c` sind gleich stark mit `temp` korreliert, daher wird sich die Modellg√ºte nicht unterscheiden.] aber nicht.
Macht auch Sinn: Abgesehen von der Jahreszahl spielt z.B. die Jahreszeit eine gro√üe Rolle f√ºr die Temperatur. Das haben wir nicht ber√ºcksichtigt.


>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"}  Wie warm ist es laut unserem Modell dann im Jahr 2051?

```{r}
predict(lm_wetter1_zentriert, newdata = tibble(year_c = 100))
```


>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Moment! Die Vorhersage ist doch Quatsch! Schon im Jahr 2022 lag die Durchschnittstemperatur bei 10,5¬∞ Celcius.^[[Quelle: Umweltbundesamt](https://www.umweltbundesamt.de/daten/klima/trends-der-lufttemperatur#steigende-durchschnittstemperaturen-weltweit)]


>    [üßë‚Äçüè´]{.content-visible when-format="html"}[\emoji{teacher}]{.content-visible when-format="pdf"} Wir brauchen ein besseres Modell! Zum Gl√ºck haben wir ambitionierte Nachwuchs-Wissenschaftler:innen.


:::: {.content-visible when-format="html"}
Die Ver√§nderung der auf f√ºnf Jahre gemittelten Abweichung der Lufttemperatur zum Mittel von von 1951 bis 1980 ist in @fig-temp-de dargestellt.
Links ist eine grobe Temperaturrasterung zu sehen (Daten ab 1753)^[Quelle: <https://de.wikipedia.org/wiki/Zeitreihe_der_Lufttemperatur_in_Deutschland#cite_ref-3>]; rechts eine feinere (Daten ab 1881)^[Quelle: <https://opendata.dwd.de/climate_environment/CDC/grids_germany/monthly/air_temperature_mean/>].


:::{#fig-temp-de}
![Temperaturverlauf in Deutschland von 1753 bis 2020](img/temp-de.gif){width="50%"}

![](img/legende.png)


:::


[Bildquelle; Lizenz: GeoNutzV](https://de.wikipedia.org/wiki/Zeitreihe_der_Lufttemperatur_in_Deutschland)

::::

### Bin√§re UV


:::{#def-binvar}
### Bin√§re Variable
Eine *bin√§re* UV, auch *Indikatorvariable* oder *Dummyvariable* genannt, 
hat nur zwei Auspr√§gungen: 0 und 1.$\square$
:::


:::{#exm-bin}
### Bin√§re Variablen 
Das sind zum Beispiel *weiblich* mit den Auspr√§gungen `0` (nein) und `1` (ja) oder *before_1950* mit `1` f√ºr Jahre fr√ºher als 1950 und `0` ansonsten.$\square$
:::

:::{#exm-binuv}

Hier interessiert Sie folgende Forschungsfrage: 

>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Ob es in der zweiten H√§lfte des 20. Jahrhunderts wohl w√§rmer warm, im Durchschnitt, als vorher?$\square$
:::

Aber wie erstellen Sie eine Variable `after_1950`, um die zweite H√§lfte des 20. Jahrhunderts (und danach) zu fassen?
Nach einigem √úberlegen kommen Sie auf die Idee, das vektorisierte Rechnen von R (s. @sec-veccalc) auszunutzen:

```{r}
year <- c(1940, 1950, 1960)
after_1950 <- year > 1950  # pr√ºfe ob as Jahr gr√∂√üer als 1950 ist
after_1950
```

Die ersten zwei Jahre  von `year` sind nicht gr√∂√üer als 1950, das dritte schon.

Ja, so k√∂nnte das klappen! Diese Syntax √ºbertragen Sie auf Ihre `wetter`-Daten:

```{r}
wetter <-
  wetter %>% 
  mutate(after_1950 = year > 1950) %>% 
  filter(region != "Deutschland")  # ohne Daten f√ºr Gesamt-Deutschland
```


Scheint zu klappen!

Jetzt ein lineares Modell dazu berechnen:

```{r}
lm_wetter_bin_uv <- lm(temp ~ after_1950, data = wetter)
```

Die Parameter des Modells lassen darauf schlie√üen, dass es tats√§chlich w√§rmer war nach 1950, und zwar im Schnitt offenbar ein gutes halbes Grad, s. @fig-wetter2.

:::{#fig-wetter2 layout-ncol=2}

![Der Sch√§tzbereich f√ºr den Parameter reicht von ca. 0.5 bis 0.8 Grad Unterschied](img/fig-lm-wetter-bin-uv.png)

![Wie man sieht, √ºberlappen die Temperaturen dennoch betr√§chtlich; aufgrund des starken Overplotting ist dieses Diagramm alles andere als ideal](img/fig-temp-after1950.png)

Modell `temp ~ after_1950`

:::


Leider zeigt ein Blick zum `r2`, dass die Vorhersageg√ºte des Modells zu w√ºnschen √ºbrig l√§sst^[`r2(lm_wetter_bin_uv)`]. $\square$



:::{.callout-important}
### Lineare Modelle verkraften nur metrische Variablen
Um die Koeffizienten eines linearen Modells auszurechnen,
ben√∂tigt man eine metrische X- und eine metrische Y-Variable.
Hier haben wir aber keine richtige metrische X-Variable^[UV],
sondern eine *logische* Variable mit den Werten `TRUE` und `FALSE`.$\square$
:::

Um die X-Variable in eine metrische Variable umzuwandeln, 
gibt es einen einfachen Trick,
den R f√ºr uns ohne viel Ank√ºndigung durchf√ºhrt: 
Umwandling in mehrere bin√§re Variablen.


Hat ein nominaler Pr√§diktor zwei Stufen, so √ºberf√ºhrt^[synonym: transformiert] `lm()` diese Variable in eine bin√§re Variable.
Da eine bin√§re Variable metrisch ist, 
kann die Regression in gewohnter Weise durchgef√ºhrt werden.
Wenn Sie die Ausgabe der Parameter betrachten, 
so sehen Sie die neu erstellte bin√§re Variable.
Man beachte, dass der urspr√ºngliche Datensatz nicht ge√§ndert wird, 
nur w√§hrend der Analyse von `lm` wird die Umwandlung der Variable ^[Transformation] durchgef√ºhrt.

>    [ü§ñ]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Eine `1` kannst du als "Ja! Richtig!" verstehen und eine`0` als "Nein! Falsch!"

`after_1950` wird in eine Indikatorvariable umgewandelt:

:::: {layout-ncol=3}



::: {.column width="40%"}

```{r}
#| echo: false

d <- tribble(
  ~id, ~after_1950, ~after_1950TRUE,
  1,   TRUE,       1,
  2,  FALSE,       0
)

d[1:2] |> knitr::kable()
```

:::

::: {.column width="20%"}

$\qquad \rightarrow$

:::

::: {.column width="40%"}
```{r}
#| echo: false

d[c(1,3)] |> knitr::kable()
```
:::

::::


:::{#exm-bin-trans}
### Beispiel: 'Geschlecht' in eine bin√§re Variable umwandeln.

Angenommen wir haben eine Variable `geschlecht` 
mit den zwei Stufen `Frau` und `Mann`
und wollen diese in eine Indikatorvariable umwandeln.
Da "Frau" alphabetisch vor "Mann" kommt, 
nimmt R "Frau" als *erste* Stufe bzw. als *Referenzgruppe*. 
"Mann" ist dann die zweite Stufe, 
die in der Regression dann in Bezug zur Referenzgruppe gesetzt wird.
`lm` wandelt uns diese Variable in `geschlechtMann` 
um mit den zwei Stufen `0` (kein Mann, also Frau) und `1` (Mann).$\square$
:::


:::: {layout-ncol=3}



::: {.column width="40%"}


```{r}
#| echo: false

d2 <- tribble(
  ~id, ~geschlecht, ~geschlechtMann,
  1,   "Mann",       1,
  2,  "Frau",       0
)

d2[1:2] %>% knitr::kable()
```

:::

::: {.column width="20%"}

$\qquad \rightarrow$

:::

::: {.column width="40%"}

```{r}
#| echo: false

d2 <- tribble(
  ~id, ~geschlecht, ~geschlechtMann,
  1,   "Mann",       1,
  2,  "Frau",        0
)

d2[c(1,3)] %>% knitr::kable()

```

:::
::::


Ein lineares Modell mit bin√§rer UV ist nichts anderes die Differenz der Gruppenmittelwerte zu berechnen:

```{r}
wetter %>% 
  group_by(after_1950) %>% 
  summarise(temp_mean = mean(temp))
```

Die Interpretation eines linearen Modells mit bin√§rer UV veranschaulicht @fig-binvar: 
Der Achsenabschnitt (b0) entspricht dem Mittelwert der 1. Gruppe.
Der Mittelwert der 2. Gruppe entspricht der *Summe* aus Achsenabschnitt und dem Koeffizienten der zweiten Gruppe. 
(@fig-binvar zeigt nur die Daten f√ºr den Monat Juli im Bundesland Bayern, der Einfachheit und √úbersichtlichkeit halber.)

```{r}
#| echo: false
#| label: fig-binvar
#| fig-cap: Sinnbild zur Interpretation eines linearen Modells mit bin√§rer UV (reingezoomt, um den Mittelwertsunterschied hervorzuheben)

wetter4 <-
  wetter |> 
  filter(month == 7, region == "Bayern") |> 
  mutate(after1950_TRUE = ifelse(after_1950, 1, 0)) 

lm4 <- lm(temp ~ after1950_TRUE, data = wetter4)

wetter4 %>% 
  ggplot(aes(x = after1950_TRUE, y = temp)) +
  geom_jitter(alpha = .5, width = .2) +
  #geom_violin(alpha = .7) +
  theme_minimal() +
  geom_abline(slope =  coef(lm4)[2], intercept =  coef(lm4)[1], color = "grey20") +
  stat_summary(fun = "mean", color = "grey20") +
  annotate("point", x = 0, y = coef(lm4)[1], 
           color = beta0col, size = 5) +
  annotate("label", x = 0, y = coef(lm4)[1], 
           color = beta0col, label = "hat(beta)[0]",
           parse = TRUE, hjust = "left") +
  geom_segment(x = 1, y = coef(lm4)[1], yend = coef(lm4)[1] + coef(lm4)[2], 
               color = beta1col,
               linewidth = 1.2,
             arrow = arrow(length = unit(0.03, "npc"))) +
  annotate("label", x = 1, y = coef(lm4)[1] +  coef(lm4)[2]*0.5, 
           color = beta1col, label = "hat(beta)[1]",
           parse = TRUE, hjust = 2) +
  scale_x_continuous(breaks = c(0, 1)) +
  coord_cartesian(ylim = c(16, 18)) +
  annotate("label", x = c(0, 1), y = 16, label = c("bis 1950", "nach 1950"))
  
```

Fassen wir die Interpretation der Koeffizienten f√ºr das Modell mit bin√§rer UV zusammen:

1. Mittelwert der 1. Gruppe (bis 1950): [Achsenabschnitt (b0)]{.beta0col}
2. Mittelwert der 2. Gruppe (nach 1950): [Achsenabschnitt (b0)]{.beta0col} + [Steigung der Regressionsgeraden (b1)]{.beta1col}

F√ºr die Modellwerte $\color{modelcol}{\hat{y}}$ gilt also:

- Temperatur laut Modell bis 1950: $\color{modelcol}{\hat{y}} = \color{beta0col}{\beta_0} = 17.7$ 

- Temperatur laut Modell bis 1950: $\color{modelcol}{\hat{y}} = \color{beta0col}{\beta_0} +  \color{beta1col}{\beta_1}= \color{beta0col}{17.7} + \color{beta1col}{0.6} = 18.3$ 




:::{.callout-note}
Bei *nominalen* (und auch bei *bin√§ren*) Variablen ist $\color{beta1col}{\beta_1}$ ein *Schalter*; bei *metrischen* Variablen ein *Dimmer*.^[Ich danke Karsten L√ºbke f√ºr diese Idee.] $\square$
:::


### Nominale UV

In diesem Abschnitt betrachten wir ein lineare Modell^[f√ºr uns synonym: Regressionsmodell] mit einer mehrstufigen^[drei oder mehr Stufen bzw. Auspr√§gungen] (nominalskalierten) UV.^[So ein Modell ist von den Ergebnissen her praktisch identisch zu einer einfachen *Varianzanalyse*.]


:::{#exm-wetter2}
Ob es wohl substanzielle^[wie k√∂nnte man dieses Wort eigentlich definieren?] Temperaturunterschiede zwischen den Bundesl√§ndern gibt?
:::

Befragen wir dazu ein lineares Modell, s. @tbl-lm_wetter_region.

```{r}
#| results: false
lm_wetter_region <- lm(temp ~ region, data = wetter)
parameters(lm_wetter_region)
```


```{r}
#| echo: false
#| label: tbl-lm_wetter_region
#| tbl-cap: "Modellparameter f√ºr lm_wetter_region"
#| message: false
parameters(lm_wetter_region) %>% print_md()
```

Hat die nominalskalierte UV mehr als zwei Stufen, 
so transformiert `lm` sie in mehr als eine Indikatorvariablen um.
Genauer gesagt ist es immer eine Indikatorvariablen 
weniger als es Stufen in der nominalskalierten Variablen gibt.





Betrachten wir ein einfaches Beispiel, eine Tabelle mit der Spalte `Bundesland` -- aus Gr√ºnden der Einfachheit hier nur mit *drei* Bundesl√§ndern. 
Damit `lm` arbeiten kann, wird `Bundesland` in *zwei* Indikatorvariablen umgewandelt:

:::: {layout-ncol=3}

::: {.column width="40%"}

```{r}
#| echo: false

d <- tribble(
  ~id, ~Bundesland, ~BL_Bayern, ~BL_Bra,
  1,   "BaW√º",       0,   0,
  2,  "Bayern",       1,  0,
  3, "Brandenburg",   0,  1
)

d[1:2] %>% knitr::kable()
```

:::

::: {.column width="20%"}

</br>
</br>


$\qquad \rightarrow$

:::

::: {.column width="40%"}
```{r}
#| echo: false

d[c(1,3, 4)] %>% knitr::kable()
```
:::
::::




Auch im Fall mehrerer Auspr√§gungen einer nominalen Variablen gilt die gleiche Logik der Interpretation wie bei bin√§ren Variablen:



1. Mittelwert der 1. Gruppe: Achsenabschnitt (b0)
2. Mittelwert der 2. Gruppe: Achsenabschnitt (b0) + Steigung der 1. Regressionsgeraden (b1)
3. Mittelwert der 2. Gruppe: Achsenabschnitt (b0) + Steigung der  2. Regressionsgeraden (b2)
4. usw.

Es kann nervig sein, dass das Bundesland, 
welches als *Referenzgruppe* (sprich als Gruppe des Achsenabschnitts ausgew√§hlt wurde) nicht explizit in der Ausgabe angegeben ist.
Der Wert der Referenzgruppe findet seinen Niederschlag im Achsenabschnitt.

:::{.callout-note}
Bei einer Variable vom Typ `character` w√§hlt R den alphabetisch ersten Wert als Referenzgruppe f√ºr ein lineares Modell aus. Bei einer Variable vom Typ `factor` ist die Reihenfolge bereits festgelegt, vgl. @sec-faktorvar.
Der Mittelwert dieser Gruppe entspricht dem Achsenabschnitt. $\square$
:::




:::{#exm-baw√º}
### Achsenabschnitt in wetter_lm2
Da Baden-W√ºrttemberg das alphabetisch erste Bundesland ist, wird es von R als Referenzgruppe ausgew√§hlt, dessen Mittelwert als Achsenabschnitt im linearen Modell hergenommen wird.$\square$
:::



Am einfachsten verdeutlicht sich `lm_wetter_region` vielleicht mit einem Diagramm, s. @fig-bin-nom.



```{r}
#| echo: false
#| label: fig-bin-nom
#| fig-cap: Sinnbild zur Interpretation eines linearen Modells mit nominaler UV (reingezoomt, um den Mittelwertsunterschied hervorzuheben). Die Achsen wurden um 90¬∞ gedreht, damit man die Namen der Bundesl√§nder besser lessen kann.

wetter_summ <- 
  wetter %>% 
  group_by(region) %>% 
  summarise(temp = mean(temp)) %>% 
  mutate(id = 0:15) %>% 
  ungroup() %>%
  mutate(grandmean = mean(temp),
         delta = temp - grandmean)

wetter_summ %>%  
# filter(region != "Deutschland") %>% 
  ggplot(aes(y = region, x = temp)) +
  theme_minimal() +
  geom_label(aes(label = paste0("b", id),
                 x = grandmean + delta), 
             vjust = 1,
             size = 2) +
  #stat_summary(fun = "mean", color = "grey20") + 
  geom_vline(xintercept = coef(lm_wetter_region)[1], linetype = "dashed", color = okabeito_colors()[2]) +
  coord_cartesian(xlim = c(7, 10), ylim = c(0, 16))  +
  
  #coord_flip() +
  annotate("label",
           y = 1,
           x = coef(lm_wetter_region)[1],
           vjust = 1,
           label = paste0("b0"),
           #size = 6,
           color = beta0col) +
  annotate("point", 
           y = 1, 
           x = coef(lm_wetter_region)[1], 
           color = beta0col,
           #vjust = 1,
           size = 4) +
  geom_segment(aes(yend = region, xend = temp), 
               x = coef(lm_wetter_region)[1])  +
    geom_point() +
  labs(y = "",
       x = "Temperatur")
```



:::{#exm-months}
### Niederschlagsmenge im Vergleich der Monate

Eine weitere Forschungsfrage, die Sie nicht au√üer acht lassen wollen, ist die Frage nach den jahreszeitlichen Unterschieden im Niederschlag (engl. precipitation).
Los R, rechnen!

>    [ü§ñ]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Endlich geht's weiter! Ergebnisse in @tbl-lm_wetter-month! $\square$
:::


```{r}
#| results: hide
lm_wetter_month <- lm(precip ~ month, data = wetter)
parameters(lm_wetter_month)
```

```{r}
#| echo: false
#| label: tbl-lm_wetter-month
#| tbl-cap: Modellparameter f√ºr lm_wetter_month
parameters(lm_wetter_month) %>% print_md()
```


Ja, da scheint es deutliche Unterschied im Niederschlag zu geben. 
Wir brauchen ein Diagramm zur Verdeutlichung, s. @fig-wetter-month, links.^[`plot(estimate_expectation(lm_wetter_month)`]
Oh nein:  R betrachtet `month` als numerische Variable! 
Aber "Monat" bzw. "Jahreszeit" sollte nominal sein.

>    [ü§ñ]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Aber `month` ist als Zahl in der Tabelle hinterlegt. Jede ehrliche Maschine verarbeitet eine Zahl als Zahl, ist doch klar!

>    [üë©]{.content-visible when-format="html"}[\emoji{woman}]{.content-visible when-format="pdf"} Okay, R, wir m√ºssen  `month` in eine nominale Zahl transformieren. Wie geht das?


>    [ü§ñ]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Dazu kannst du den Befehl `factor` nehmen. Damit wandelst du eine numerische Variable in eine nominalskalierte Variable (Faktorvariable) um. Faktisch hei√üt das, dass dann eine Zahl als Text gesehen wird.


:::{#exm-factor}
Transformiert man `42` mit `factor`, so wird aus `42` `"42"`. Aus der Zahl wird ein Text.
Alle metrischen Eigenschaften gehen verloren; die Variable ist jetzt auf nominalen Niveau.$\square$
:::

```{r}
wetter <-
  wetter %>% 
  mutate(month_factor = factor(month))
```

Jetzt berechnen wir mit der faktorisierten Variablen ein lineares Modell, s. @tbl-lm_wetter_month_factor.

```{r}
#| results: hide
lm_wetter_month_factor <- lm(precip ~ month_factor, data = wetter)
parameters(lm_wetter_month_factor)
```

```{r}
#| echo: false
#| label: tbl-lm_wetter_month_factor
#| tbl-cap: "Modellparameter von lm_wetter_month_factor"
parameters(lm_wetter_month_factor) %>% print_md()
```



Sehr sch√∂n! Jetzt haben wir eine Referenzgruppe (Monat 1, d.h. Januar) und 11 Unterschiede zum Januar, s. @fig-wetter-month, rechts.


:::{#fig-wetter-month layout-ncol=2}

![`lm_wetter_month`, Monat f√§lschlich als metrische Variable](img/fig-precip-month-num.png)

![`lm_wetter_month_text`, Monat korrekt als nominale Variable (aber mit viel Overplotting, das m√ºsste man besser machen)](img/fig-precip-month.png)


Niederschlagsunterschiede pro Monat (ein Punkt ist ein Jahr); aufgrund der vielen Datenpunkte ist das Diagramm wenig √ºbersichtlich (Overplotting).

:::


M√∂chte man die Referenzgruppe eines Faktors √§ndern, kann man dies mit `relevel` tun:

```{r}
wetter <-
  wetter %>% 
  mutate(month_factor = relevel(month_factor, ref = "7"))
```

So sieht dann die ge√§nderte Reihenfolge aus:^[Zum Dollar-Operator s. @sec-dollar-op]

```{r}
levels(wetter$month_factor)
```



### Bin√§re plus metrische UV {#sec-faktorvar}

In diesem Abschnitt untersuchen wir ein lineares Modell mit zwei UV: einer *zweistufigen* (bin√§ren) UV plus einer *metrischen* UV.^[So ein Modell kann auch als *Kovarianzanalyse* (engl. analysis of covariance, ancova) bezeichnet werden.]

:::{#exm-rain1}
Ob sich die Niederschlagsmenge wohl unterschiedlich zwischen den Monaten entwickelt hat in den letzten gut 100 Jahren?
Der Einfachheit halber greifen Sie sich nur zwei Monate heraus (Januar und Juli).

```{r def-wetter-month}
wetter_month_1_7 <-
  wetter %>% 
  filter(month == 1  | month == 7) 
```


>    [üßë‚Äçüè´]{.content-visible when-format="html"}[\emoji{teacher}]{.content-visible when-format="pdf"} Ich muss mal kurz auf eine Sache hinweisen...

:::{.callout-note}
### Faktorvariable
Eine Faktorvariable ist einer der beiden Datentypen in R, die sich f√ºr nominalskalierte Variablen anbieten: Textvariablen (`character`) und Faktor-Variablen (`factor`).
Ein wichtiger Unterschied ist, dass die erlaubten Auspr√§gungen ("Faktorstufen") bei einer Faktor-Variable mitgespeichert werden, bei der Text-Variable nicht.

Das kann praktisch sein, denn bei einer Faktorvariable ist immer klar, welche Auspr√§gungen in Ihrer Variable m√∂glich sind.$\square$
:::

:::{#exm-factor1}
### Beispiel f√ºr eine Faktorvariable

```{r def-geschlecht-factor}
geschlecht <- c("f", "f", "m")
geschlecht_factor <- factor(geschlecht)
geschlecht_factor
```
:::

:::{#exm-factor2}
### Filtern ver√§ndert die Faktorstufen nicht
Wenn Sie von der Faktorvariablen^[synonym: nominalskalierte Variable] `geschlecht` das 3. Element (`"m"`) herausfiltern, so dass z.B. nur die ersten beiden Elemente √ºbrig bleiben mit allein der Auspr√§gung `"f"`, merkt sich R trotzdem, dass es *zwei* Faktorstufen gibt (`"f"` und `"m"`).

Genaus so ist es, wenn Sie aus `wetter` nur die Monate  `"1"` und `"7"` herausfiltern:
R merkt sich, dass es 12 Faktorstufen gibt. 
M√∂chten Sie die herausgefilterten Faktorstufen "l√∂schen", so k√∂nnen Sie einfach die Faktorvariable neu berechnen (mit `factor`).$\square$
:::





```{r wetter-month-1-7}
wetter_month_1_7 <-
  wetter %>% 
  filter(month == 1  | month == 7) %>% 
  # Faktor (und damit die Faktorstufen) neu berechnen:
  mutate(month_factor = factor(month))
```

Okay.
Wie spezifiziert man jetzt das lineare Modell?$\square$
:::

Hat man mehrere ("multiple") X-Variablen^[Pr√§diktoren, unabh√§ngige Variablen, X-Variablen], so trennt man sich mit einem Plus-Zeichen in der Regressionsformel, z.B. `temp ~ year_c + month`.


:::{.callout-important}
### Multiple Regression
Eine multiple Regression beinhaltet mehr als eine X-Variable. Die Modellformel spezifiziert man so:

$y ~ x_1 + x_2 + \ldots + x_n \qquad \square$

:::


::: {.content-visible when-format="html"}

Die Ver√§nderung der monatlichen Temperatur (10-Jahres-Mittel) ist in @fig-wetter-anim, c) dargestellt (aber mit allen 12 Monaten, sieht sch√∂ner aus).
:::




:::{.callout-note}
### Modellgleichung
Das Pluszeichen hat in der Modellgleichung^[synonym: Regressionsformel] *keine* arithmetische Funktion. 
Es wird nichts addiert.
In der Modellgleichung sagt das Pluszeichen nur "und noch folgende UV...".$\square$
:::

Die obige Modellgleichung liest sich also so:

>    Temperatur ist eine Funktion von der (zentrierten) Jahreszahl und des Monats


```{r lm-year-month-def}
lm_year_month <- lm(precip ~ year_c + month_factor, data = wetter_month_1_7)
```

Die Modellparameter sind in @tbl-lm_year_month zu sehen.

```{r lm-year-month-params}
#| echo: false
#| label: tbl-lm_year_month
#| tbl-cap: "Modellparameter von lm_year_month"
parameters(lm_year_month) %>% print_md()
```



Die Modellkoeffizienten sind so zu interpretieren:

1. Achsenabschnitt (b0, `(Intercept`)): Im Referenzjahr (1951) im *Referenzmonat Januar* lag die Niederschlagsmenge bei 57 mm pro Quadratmeter.
2. Regressionskoeffizient f√ºr Jahr (b1, `year_c`): Pro Jahr ist die Niederschlagsmenge im Schnitt um 0.02 mm an (im Referenzmonat).
3. Regressionskoeffizient f√ºr Monat (b2, `month [7]`) Im Monat `7` (Juli) lag die mittlere Niederschlagsmenge (im Referenzjahr) knapp 25 mm √ºber dem mittleren Wert des Referenzmonats (Januar).


Die Regressiongleichung von `lm_year_month` lautet: 
`precip_pred = 56.94 + 0.03*year_c + 24.37*month_factor_7`.

Im Monat Juli ist `month_factor_7 = 1`, 
ansonsten (Januar) ist `month_factor = 0`. 

>    [üßë‚Äçüéì]{.content-visible when-format="html"}[\emoji{student}]{.content-visible when-format="pdf"} Puh, kompliziert!

>    [üßë‚Äçüè´]{.content-visible when-format="html"}[\emoji{teacher}]{.content-visible when-format="pdf"} Es gibt einen Trick, man kann sich von R einfach einen beliebigen Y-Wert berechnen lassen, s. @exm-niederschlag1.



:::{#exm-niederschlag1}
### Niederschlag laut Modell Im Juli 2020?
Hey R, berechne uns anhand neuer Daten den laut Modell zu erwartenden Niederschlag f√ºr Januar im Jahr 2020!

```{r predict-lm-year-month}
neue_daten <- tibble(year_c = 2020-1951,
                     month_factor = factor("1"))
predict(lm_year_month, newdata = neue_daten)
```
:::


:::{.callout-note}
Alle Regressionskoeffizienten beziehen sich auf den Y-Wert *unter der Annahme, dass alle √ºbrigen Pr√§diktoren den Wert Null (bzw. Referenzwert) aufweisen*.$\square$
:::




Visualisieren wir uns die gesch√§tzten Erwartungswert pro Pr√§diktorwert, 
s. @fig-lm3: `plot(estimate_expectation(lm_year_month))`

```{r plot-lm3}
#| label: fig-lm3
#| fig-cap: Temperaturverlauf √ºber die Jahre f√ºr zwei Monate. Man beachte, dass die Regressionsgeraden _parallel_ sind.
#| echo: false
#| fig-asp: 0.5

ggplot(wetter_month_1_7) +
  aes(x = year_c, 
      y = precip, 
      color = month_factor,
      group = month_factor) +
  geom_point2(alpha = .1) +
  scale_color_okabeito() +
  geom_abline(slope = coef(lm_year_month)[2],
              intercept = coef(lm_year_month)[1], color = okabeito_colors()[1], size = 2) +
  geom_abline(slope = coef(lm_year_month)[2],
              intercept = coef(lm_year_month)[1] + coef(lm_year_month)[3], color = okabeito_colors()[2], size = 2) +
  annotate("label", x = Inf,
           y = predict(lm_year_month, newdata = tibble(year_c = 50, month_factor = factor("1"))),
           label = "month 1", hjust = 1.1) +
  scale_x_continuous(limits = c(-100, 100)) +
  theme(legend.position = "none") +
  annotate("label", x = Inf,
           y = predict(lm_year_month, newdata = tibble(year_c = 50, month_factor = factor("7"))),
           label = "month 7", hjust = 1.1)

```

Mit `scale_color_okabeito` haben wir die Standard-Farbpalette durch die von  [@okabeito] ersetzt^[s. Hinweise
hier: <https://malcolmbarrett.github.io/ggokabeito/reference/palette_okabe_ito.html>].
Das ist nicht unbedingt n√∂tig, 
aber robuster bei Schwarz-Wei√ü-Druck und bei Sehschw√§chen, vgl. @sec-farbwahl.


Die erkl√§rte Varianz von `lm_year_month` liegt bei:
```{r}
r2(lm_year_month)
```



### Interaktion

Eine Modellgleichung der Form `temp ~ year + month` zwingt die Regressionsgeraden dazu, parallel zu verlaufen.
Aber vielleicht w√ºrden sie besser in die Punktewolken passen, 
wenn wir ihnen erlauben, auch *nicht* parallel verlaufen zu d√ºrfen?

Nicht-parallele Regressionsgeraden erlauben wir, 
indem wir das Regressionsmodell wie folgt spezifizieren und visualisieren, s. @lst-lm-interact.


```{r lm_year_month_interaktion}
#| lst-label: lst-lm-interact
#| lst-cap: "Ein Interaktionsmodell spezifiziert man in dieser Art: y ~ x1 + x2 + x1:x2"
lm_year_month_interaktion <- lm(
  precip ~ year_c + month_factor + year_c:month_factor, 
  data = wetter_month_1_7)
```

Visualisiert ist das Modell in @fig-wetter-interakt.

```{r plot-lm_year_month_interaktion}
#| results: hide
#| eval: false
plot(estimate_expectation(lm_year_month_interaktion)) +
  scale_color_okabeito()  # sch√∂nes Farbschema
```


```{r plot-precip-interaction}
#| echo: false
#| label: fig-wetter-interakt
#| fig-cap: "Niederschlag im Jahresverlauf und Monatsvergleich mit Interaktionseffekt: Die Ver√§nderung im Verlauf der Jahre ist unterschiedlich f√ºr die Monate (Janur vs. Juli). Die beiden Regressionsgeraden sind _nicht_ parallel."

ggplot(wetter_month_1_7) +
  aes(x = year_c, 
  y = precip, 
  color = month_factor,
  group = month_factor) +
  geom_point2(alpha = .1) +
  geom_smooth(method = "lm", size = 2, fullrange = TRUE) +
  scale_color_okabeito() +
scale_x_continuous(limits = c(-100, 100)) +
  theme(legend.position = "none") +
  annotate("label", x = Inf,
           y = predict(lm_year_month_interaktion, newdata = tibble(year_c = 50, month_factor = factor("7"))),
           label = "month 7", hjust = 1.1) +
  annotate("label", x = Inf,
           y = predict(lm_year_month_interaktion, newdata = tibble(year_c = 50, month_factor = factor("1"))),
           label = "month 1", hjust = 1.1) 
```



Der *Doppelpunkt-Operator* (`:`) f√ºgt der Regressionsgleichung einen *Interaktionseffekt* hinzu, 
in diesem Fall die Interaktion von Jahr (`year_c`) und Monat (`month_factor`):


`precip ~ year_c + month_factor + year_c:month_factor`


:::{.callout-important}
Einen Interaktionseffekt von x1 und x2 kennzeichnet man in R mit dem Doppelpunkt-Operator, `x1:x2`:

`y ~ x1 + x2 + x1:x2` $\square$
:::

In Worten: 

>   y wird modelliert als eine Funktion von x1 und x2 und dem Interaktionseffekt von x1 mit x2.



Wie man in @fig-wetter-interakt sieht, sind die beiden Regressionsgeraden *nicht parallel*.

:::{.callout-note}
Sind die Regressionsgeraden von zwei (oder mehr) Gruppen nicht parallel,
so liegt ein Interaktionseffekt vor.$\square$
:::

:::{#exm-interakt-precip}
### Interaktionseffekt von Niederschlag und Monat

Wie ist die Ver√§nderung der Niederschlagsmenge (Y-Achse) im Verlauf der Jahre (X-Achse)?
*Das kommt darauf an, welchen Monat man betrachtet*.
Der Effekt der Zeit ist *unterschiedlich* f√ºr die Monate:
Im Juli nahm der Niederschlag ab, im Januar zu.$\square$
:::

Liegt ein Interaktionseffekt vor, 
kann man nicht mehr von "dem" (statistischen) Effekt eines Pr√§diktors (afu die Y-Variable) sprechen.
Vielmehr muss man unterscheiden: 
Je nach Gruppe (z.B. Monat) unterscheidet der Effekt.^[Effekt ist hier immer statistisch, nie kausal gemeint.]


::: {.content-visible when-format="html"}

Betrachten wir die Parameterwerte des Interaktionsmodells (`parameters(lm_year_month_interaktion)`), 
s. @tbl-lm_year_month_interaktion.
:::


::: {.content-visible when-format="pdf"}
Betrachten wir die Parameterwerte des Interaktionsmodells, 
s. @tbl-lm_year_month_interaktion.
:::


```{r} 
#| echo: false
#| label: tbl-lm_year_month_interaktion
#| tbl-cap: "Modellparameter von lm_year_month_interaktion"
parameters(lm_year_month_interaktion) %>% print_md()
```

Neu bei der Ausgabe zu diesem Modell ist die Zeile `year c √ó month factor [7]`.
Sie gibt die St√§rke des Interaktionseffekts an.
<!-- Da die Null nicht im Sch√§tzbereich (`95 CI`) liegt, ist der Interaktionseffekt offenbar nicht Null, also vorhanden (zumindest laut unserem Modell^[unser Modell k√∂nnte ja auch falsch sein.]. -->
Die Zeile zeigt, wie unterschiedlich sich die die Niederschlagsmenge zwischen den beiden Monaten im Verlauf der Jahre √§ndert: Im Monat `"7"` ist der Effekt von `year_c` um 0.20 mm geringer: Die Regressionsgerade neigt sich mehr nach "unten" im Monat Juli, da der Koeffizient kleiner als Null ist.

Die Regressionsgleichung lautet:
`precip_pred = 56.91 + 0.13*year_c + 24.37*month_factor_7 - 0.20*year_c:month_factor_7`.


:::{.callout-important}
Der Achsenabschnitt gibt den Wert f√ºr Y an unter der Annahme, dass alle Pr√§diktoren den Wert Null aufweisen. 
In diesem Fall gibt der Achsenabschnitt also den Niederschlag f√ºr den Janur des Jahres 1951 an.
Die Regressionskoeffizienten geben die Zunahme in Y an, wenn der jeweilige Pr√§diktorwert um 1 steigt, die √ºbrigen Pr√§diktoren aber den Wert 0 aufweisen.$\square$


:::


Das R-Quadrat von `lm_year_month_interaktion` betr√§gt √ºbrigens nur geringf√ºgig mehr als im Modell ohne Interaktion:

```{r}
r2(lm_year_month_interaktion)  # aus `{easystats}`
```




## Modelle mit vielen UV


### Zwei metrische UV




::::: {.content-visible when-format="html"}

Ein Modell mit zwei metrischen UV kann man sich im 3D-Raum visualisieren, s. @fig-3d-regr.
Im 3D-Raum wird die Regressionsgerade zu einer *Regressionsebene.*

::::{#fig-3d-regr}


:::{.panel-tabset}

#### 3D-Animation

![Animation eines Regeressionsmodells mit zwei metrischen UV, x1 und x2; y wird gut von den beiden UV erkl√§rt](img/regression_plane_rotation.gif){#fig-regression-plane-rotation}

#### 3D-Diagramme f√ºr Modelle mit zwei Pr√§diktoren



```{r}
#| label: Ein interaktives 3D-Diagramm und Regressionsebene
#| echo: false

source("children/3d.R")
scatterplot_3d_with_trace
```

#### 2D-Diagramm f√ºr 3D-Modell

```{r}
#| label: 2D-Diagramm f√ºr 3D-Modell
#| echo: false
lm3d_expect <- estimate_relation(lm3d)
plot(lm3d_expect)
```


:::

::::

:::::


::::: {.content-visible when-format="pdf"}

Ein Modell mit zwei metrischen UV kann man sich im 3D-Raum visualisieren, s. @fig-3d-regr-statisch, oder im 2D-Raum, s. @fig-3d-regr-2d.
Im 3D-Raum wird die Regressionsgerade zu einer *Regressionsebene.*



::: {#fig-3d-regr-statisch layout-ncol=3}


![Winkel 1](img/3d_scatter1.png)

![Winkel 2](img/3d_scatter2.png)

![Winkel 3](img/3d_scatter3.png)


Ein lineares Modell, `y ~ x1 + x2` mit zwei Pr√§diktoren im 3D-Raum.

:::








```{r}
#| fig-cap: 2D-Diagramm f√ºr 3D-Modell
#| echo: false
#| label: fig-3d-regr-2d
lm3d_expect <- estimate_relation(lm3d)
plot(lm3d_expect)
```

:::::


```{r}
#| echo: false
data(mariokart, package = "openintro")
```

Grunds√§tzlich kann man viele Pr√§diktoren in ein (lineares) Modell aufnehmen.
Betrachten wir z.&thinsp;B. folgendes lineares Modell mit zwei metrischen UV.

```{r}
lm_mario_2uv <- lm(total_pr ~ start_pr + ship_pr, data = mariokart %>% filter(total_pr < 100))
```

<!-- , s. auch @fig-mario-2uv. -->

::: {.content-visible when-format="html"}

@fig-mario-2uv-dyn visualisiert das Modell `lm_mario2v` in einem 3D-Diagramm.

```{r fig-mario-2uv}
#| echo: false
#| eval: true
#| label: fig-mario-2uv-dyn
#| fig-cap: "Das Modell `lm_mario2v` mit 2 metrischen UV (und 1 metrische AV) als 3D-Diagramm"

lm_coefs <- coef(lm_mario_2uv)

mariokart_no_extreme <- 
  mariokart |> 
  filter(total_pr < 100)

start_seq <- seq(0, 70, by = 1)
ship_seq <- seq(0, 10, by = 1)

Verkaufspreis <- t(outer(start_seq, ship_seq,
            function(x,y) {lm_coefs[1] + lm_coefs[2]*x + lm_coefs[3]*y}))

plot_ly(x = ~ start_seq,
        y = ~ ship_seq,
        z = ~ Verkaufspreis,
        type = "surface") %>% 
  add_trace(data = mariokart_no_extreme,
            x = ~start_pr,
            y = ~ship_pr,
            z = ~total_pr,
            mode = "markers",
            type = "scatter3d")
```




Jedes der beiden Regressionsgewichte in `lm_mario_2uv` entspricht der Steigung in der beiden Achsen in @fig-mario-2uv-dyn,
d.h. die Steigung f√ºr `start_pr` bzw. die Steigung f√ºr `ship_pr`.

:::



::: {.content-visible when-format="pdf"}

@fig-mario-2uv visualisiert das Modell `lm_mario2v` in einem 3D-Diagramm (betrachtet aus verschiedenen Winkeln).



::: {#fig-3d-regr-statisch layout-ncol=3}


![Winkel 1](img/3d_scatter_mario1.png)

![Winkel 2](img/3d_scatter_mario2.png)


![Winkel 3](img/3d_scatter_mario3.png)

Das Modell `lm_mario2v` mit 2 metrischen UV (und 1 metrische AV) als 3D-Diagramm

:::


### Viele UV ins Modell?

Wir k√∂nnten im Prinzip alle Variablen unserer Datentabelle 
als Pr√§diktoren in das Regressionsmodell aufnehmen.
Die Frage ist nur: Macht das Sinn?

Hier sind einige Richtlinien, die helfen, welche Pr√§diktoren (und wie viele) man in ein Modell aufnehmen sollte [@gelman_regression_2021], s. S. 199:

1. Man sollte alle Pr√§diktoren aufnehmen, von denen anzunehmen ist, dass Sie Ursachen f√ºr die Zielvariablen sind
2. Bei Pr√§diktoren mit starken (absoluten) Effekten kann es Sinn machen, ihre Interaktionseffekte auch mit in das Modell aufzunehmen
3. Pr√§diktoren mit kleinem Sch√§tzbereich (`95 CI`) sollten tendenziell im Modell belassen werden, da sie die Modellg√ºte verbessern




## Fallbeispiel zur Prognose


:::{#exm-prognose}
### Prognose des Verkaufspreis
Ganz k√∂nnen Sie von Business-Welt und ihren Gratifikationen nicht lassen, 
trotz Ihrer wissenschaftlichen Ambitionen.
Sie haben den Auftrag bekommen, den Verkaufspreis von Mariokart-Spielen m√∂glichst exakt vorherzusagen. 
Also gut, das Honorar ist phantastisch, Sie sind jung und brauchen das Geld.$\square$
:::

### Modell "all-in"

Um die G√ºte Ihrer Vorhersagen zu pr√ºfen, teilt Ihr Chef den Datensatz in zwei zuf√§llige Teile.


>    üßî‚Äç‚ôÇÔ∏è Ich teile den Datensatz `mariokart` zuf√§llig in zwei Teile.
Den ersten Teil kannst du nutzehn, um Modelle zu berechnen ("trainieren") und ihre G√ºte zu pr√ºfen. Den Teil nenne ich "Trainingssample", h√∂rt sich cool an, oder? 
Im Train-Sample ist ein Anteil (`frac`tion) von 70% der Daten, okay? 
Die restlichen Daten behalte ich. Wenn du ein gutes Modell hast, 
kommst du und wir berechnen die G√ºte deiner Vorhersagen in dem verbleibenden Teil, die √ºbrigen 30% der Daten. 
Diesen Teil nennen wir Test-Sample, alles klar?


```{r mariokart-train-test}
#| echo: false
#| eval: false
# library(readr)
#write_csv(mariokart_train, "daten/mariokart_train.csv")
#write_csv(mariokart_test, "daten/mariokart_test.csv")
```

Wenn die Daten auf Ihrer Festplatte liegen, z.B. im Unterordner `daten`,
dann k√∂nne Sie sie von dort importieren:

```{r}
#| eval: false
mariokart_train <- read.csv("daten/mariokart_train.csv")
```

Alternativ k√∂nnen Sie sie auch von diesem Pfad von einem Rechner in der Cloud herunterladen:

::: {.content-visible when-format="html"}

```{r}
mariokart_train <- read.csv("https://raw.githubusercontent.com/sebastiansauer/statistik1/main/daten/mariokart_train.csv")
```

Dann importieren wir auf gleiche Weise Test-Sample in R:

```{r}
mariokart_test <- read.csv("https://raw.githubusercontent.com/sebastiansauer/statistik1/main/daten/mariokart_test.csv")
```

:::


::: {.content-visible when-format="pdf"}

```{r import-mariokart-train-pdf}
mariokart_train_path <- paste0( "https://raw.githubusercontent.com/sebastiansauer/",
"statistik1/main/daten/mariokart_train.csv")

mariokart_train <- read.csv(mariokart_train_path)
```

Dann importieren wir auf gleiche Weise Test-Sample in R:

```{r import-mariokart-test-pdf}
mariokart_test_path <- paste0(
 "https://raw.githubusercontent.com/sebastiansauer/",
 "statistik1/main/daten/mariokart_test.csv")

mariokart_test <- read.csv(mariokart_test_path)
```

:::


Also los. Sie probieren mal die "All-in-Strategie": 
Alle Variablen rein in das Modell.
Viel hilft viel, oder nicht?


```{r lm-all-in}
lm_allin <- lm(total_pr ~ ., data = mariokart_train)
r2(lm_allin)  # aus easystats
```


Der Punkt in `total_pr ~ . ` hei√üt "alle Variablen in der Tabelle (au√üer `total_pr`)".



>    [üë¥]{.content-visible when-format="html"}[\emoji{old-man}]{.content-visible when-format="pdf"} Hey! Das ist ja fast perfekte Modellg√ºte!

>    [ü¶π‚Äç‚ôÄÔ∏è]{.content-visible when-format="html"}[\emoji{woman-supervillain}]{.content-visible when-format="pdf"}Ô∏è Vorsicht: Wenn ein Angebot aussieht wie "too good to be true", dann ist es meist auch too good to be true.





:::{.callout-note}
### Overfitting
Der Grund f√ºr den fast perfekten Modellfit ist die Spalte `Title`.
Unser Modell hat einfach den Titel jeder Auktion auswendig gelernt.
Wei√ü man, welcher Titel zu welcher Auktion geh√∂rt, 
kann man perfekt die Auktion aufsagen bzw. das Verkaufsgebot perfekt vorhersagen.
Leider n√ºtzen die Titel der Auktionen im Train-Sample *nichts* f√ºr andere Auktionen.
Im Test-Sample werden unsere Vorhersagen also grottenschlecht sein,
wenn wir uns auf die Titel der Auktionen im Test-Sample st√ºtzen.
Merke: H√∂chst idiografische Informationen wie Namen, Titel etc. sind nicht n√ºtzlich,
um allgemeine Muster zu erkennen und damit exakte Prognosen zu erstellen.$\square$
:::



Probieren wir also die Vorhersage im Test-Sample:

```{r lm-allin-predict-error}
#| error: true
predict(lm_allin, newdata = mariokart_test)
```



Oh nein! Was ist los!? Eine Fehlermeldung!

:::{.callout-caution}
Nominalskalierte Pr√§diktorvariablen mit vielen Auspr√§gungen, wie `title` sind problematisch.
Kommt eine Auspr√§gung von `title` im Test-Sample vor,
die es *nicht* im Train-Sample gab, so resultiert ein Fehler beim `predict`en.
H√§ufig ist es sinnvoll, auf diese Variable zu verzichten,
da diese Variablen oft zu Overfitting f√ºhren.$\square$
:::


### Modell "all-in", ohne Titelspalte

Okay, also auf die Titelspalte sollten wir vielleicht besser verzichten.
N√§chster Versuch.

```{r mariokart-train2}
mariokart_train2 <-
  mariokart_train %>% 
  select(-c(title, V1, id))
```


Wir entfernen auch die Spalte `V1` und `id`,
da sie ebenfalls keine Informationen bergen.


```{r lm_allin_no_title}
lm_allin_no_title <- lm(total_pr ~ ., data = mariokart_train2)
r2(lm_allin_no_title) 
```



Das R-Quadrat ist ja durchaus ordentlich.
Schauen wir uns noch den `rmse` (die SD der Vorhersagefehler) an^[der Befehl wohnt im Paket `performance`, Teil des Metapakets `easystats`]:


>    [ü§ñ]{.content-visible when-format="html"}[\emoji{robot}]{.content-visible when-format="pdf"} Gut gemacht!


```{r performance-lm-allin-no-title}
performance::rmse(lm_allin_no_title)
```


:::{.callout-caution}
### Name Clash
Im Paket `yardstick` gibt es eine Funktion namens `rmse` und im Paket `performance`, Teil des Meta-Pakets `easystats` ebenfalls.
Da sind Probleme vorprogrammiert.
Das ist so als w√ºrde die Lehrerin rufen: "Schorsch, komm her!". 
Dabei gibt es zwei Schorsche in der Klasse: Den M√ºllers Schorsch und den Meiers Schorsch.
Sonst kommen beide, was die Lehrerin nicht will.
Die Lehrerin m√ºsste also rufen: "M√ºller Schorsch, komm her!".
Genau dasselbe machen wir, wenn wir das R-Paket eines Befehls mitschreiben, sozusagen den "Nachnamen" des Befehls:
`paketname::funktion` ist wie `M√ºller::Schorsch`. 
In unserem Fall also: `performance::rmse`
Endlich wei√ü R wieder, was zu tun ist!$\square$
:::


Sie rennen zu Ihrem Chef, der jetzt die G√ºte Ihrer Vorhersagen in den *restlichen* Daten bestimmen soll.

>    [üë¥]{.content-visible when-format="html"}[\emoji{old-man}]{.content-visible when-format="pdf"} Da wir dein Modell in diesem Teil des Komplett-Datensatzes *testen*, nennen wir diesen Teil das "Test-Sample".



Ihr Chef schaut sich die Verkaufspreise im Test-Sample an:

```{r}
mariokart_test %>% 
  select(id, total_pr) %>% 
  head()
```

>    [üë¥]{.content-visible when-format="html"}[\emoji{old-man}]{.content-visible when-format="pdf"}Ô∏è Okay, hier sind die ersten paar echten Verkaufspreise. Jetzt mach mal deine Vorhersagen auf Basis deines besten Modells!

Hier sind Ihre Vorhersagen^[engl. predictions; to predict: vorhersagen]:

```{r}
lm_allin_predictions <- predict(lm_allin_no_title, newdata = mariokart_test)
```


Hier sind Ihre ersten paar Vorhersagen:

```{r}
head(lm_allin_predictions)
```

Dies Vorhersagen f√ºgen wir noch der Ordnung halber in die Tabelle mit den Test-Daten:

```{r}
mariokart_test <-
  mariokart_test %>% 
  mutate(lm_allin_predictions = predict(lm_allin_no_title, newdata = mariokart_test))
```



Okay, was ist jetzt der mittlere Vorhersagefehler?


Um die Vorhersageg√ºte im Test-Sample auszurechnen^[wir verwenden dazu die Funktionen `mae` und `rsq`], 
nutzen wir die Funktionen des R-Paketes `yardstick`^[welches Sie vielleicht noch installieren m√ºssen.]:
 
```{r}
#| eval: false
library(yardstick)

yardstick::mae(data = mariokart_test,
               truth = total_pr,  # echter Verkaufspreis
               estimate = lm_allin_predictions)  # Ihre Vorhersage
yardstick::rmse(data = mariokart_test,
               truth = total_pr,  # echter Verkaufspreis
               estimate = lm_allin_predictions)  # Ihre Vorhersage
```

```{r mae-rmse-lm-all-n}
#| echo: false
library(yardstick)

yardstick::mae(data = mariokart_test,
               truth = total_pr,  # echter Verkaufspreis
               estimate = lm_allin_predictions) |>  # Ihre Vorhersage
  knitr::kable()
yardstick::rmse(data = mariokart_test,
               truth = total_pr,  # echter Verkaufspreis
               estimate = lm_allin_predictions)  |>  # Ihre Vorhersage
  knitr::kable()
```


Ihr mittlerer Vorhersagefehler (RMSE) liegt bei ca. 13 Euro.^[Wir haben hier `yardstick::rmse` geschrieben und nicht nur `rmse`, 
da es sowohl im Paket `performance` ( Teil des Metapakets `easystats`) als auch im Paket `yardstick` (Teil des Metapakets `tidymodels`) 
einen Befehl des Namens `rmse` gibt. Name-Clash-Alarm! 
R k√∂nnte daher den anderen `rmse`` meinen als Sie, 
was garantiert zu Verwirrung f√ºhrt.^[Entweder bei R oder bei Ihnen.]

>    [üë¥]{.content-visible when-format="html"}[\emoji{old-man}]{.content-visible when-format="pdf"} Ganz okay.

Wie ist es um das R-Quadrat Ihrer Vorhersagen bestellt?


```{r}
#| eval: false
# `rsq ` ist auch aus dem Paket yardstick:
rsq(data = mariokart_test,
    truth = total_pr,  # echter Verkaufspreis
    estimate = lm_allin_predictions)  # Ihre Vorhersage
```


```{r rsq-lm-all-in-preds}
#| echo: false
# `rsq ` ist auch aus dem Paket yardstick:
rsq(data = mariokart_test,
    truth = total_pr,  # echter Verkaufspreis
    estimate = lm_allin_predictions)  |>   # Ihre Vorhersage 
knitr::kable()
```




>    [üë¥]{.content-visible when-format="html"}[\emoji{old-man}]{.content-visible when-format="pdf"}Ô∏è 17%, nicht berauschend, aber immerhin!


:::{.callout-note}
### Modellg√ºte im Test-Sample meist geringer als im Train-Sample
Wie das Beispiel zeigt, ist die Modellg√ºte im Test-Sample (leider) oft *geringer* als im Train-Sample. 
Die Modellg√ºte im Train-Sample ist mitunter √ºberm√§√üig optimistisch.
Dieses Ph√§nomen bezeichnet man als *Overfitting*.$\square$
:::

:::{.callout-tip}
Bevor man Vorhersagen eines Modells einreicht, 
bietet es sich, die Modellg√ºte in einem neuen Datensatz, als einem Test-Sample, zu √ºberpr√ºfen.$\square$
:::

## Vertiefung: Das Aufteilen Ihrer Daten

### Analyse- und Assessment-Sample

Wenn Sie eine robuste Sch√§tzung der G√ºte Ihres Modells erfahren m√∂chten,
bietet sich folgendes Vorgehen an (vgl. @fig-sample-types):


1. Teilen Sie Ihren Datensatz (das Train-Sample) in zwei Teile: Das sog. Validation-Sample und das sog. Assessment-Sample.
2. Berechnen Sie Ihr Modell im ersten Teil Ihres Datensatzes (dem *Validation-Sample*).
3. Pr√ºfen Sie die Modellg√ºte im zweiten Teil Ihres Datensatzes (dem  *Assessment-Sample*)

<!-- Das ist ein Hauf von "Samples".  -->
<!-- Zur Verdeutlichung zeigt @fig-samples Ihnen noch mal die Unterteilung dieser Stichproben-Arten. -->





Diese Aufteilung Ihres Datensatzatzes in diese zwei Teile nennt man auch *Validierungsaufteilung* (validation split); Sie k√∂nnen sie z.B. so bewerkstelligen:


```{r}
library(rsample)
mariokart <- read_csv("daten/mariokart.csv")  # Wenn die CSV-Datei in einem Unterordner mit Namen "daten" liegt

meine_aufteilung <- initial_split(mariokart, strata = total_pr)
```



```{r}
#| echo: false
set.seed(42)
meine_aufteilung <- initial_split(mariokart, strata = total_pr)
```


`initial_split` *bestimmt* f√ºr jede Zeile (Beobachtung) zuf√§llig aus, ob diese Zeile in das Analyse- oder in das Assessment-Sample kommen soll.
Im Standard werden 75% der Daten in das Analyse- und 25% in das Assessment-Sample eingeteilt^[vgl. `help(initial_split)`];
das ist eine sinnvolle Aufteilung.
Das Argument `strata` sorgt daf√ºr, dass die Verteilung der AV in beiden Stichproben gleich ist.
Es w√§re n√§mlich bl√∂d f√ºr Ihr Modell, wenn im Train-Sample z.B. nur die teuren, und im Test-Sample nur die g√ºnstigen Spiele landen w√ºrde.^[Anderes Beispiel: In den ersten Zeilen stehen nur Kunden aus Land A und in den unteren Zeilen nur aus Land B.] 
In so einem Fall w√ºrde sich Ihr Modell unn√∂tig schwer tun.

Im n√§chsten Schritt k√∂nnen Sie anhand anhand der von `initial_split` bestimmten Aufteilung die Daten tats√§chlich aufteilen.^[initial_split sagt nur, welche Zeile in welche der beiden Stichproben kommen *soll*. Die eigentliche Aufteilung wird aber noch nicht durchgef√ºhrt.]


```{r}
mariokart_train <- training(meine_aufteilung)  # Analyse-Sample
mariokart_test <- testing(meine_aufteilung)  # Assessment-Sample
```


Ich pers√∂nliche nenne die Tabelle mit den Daten gerne `d_analysis` bzw. `d_assess`,
das ist k√ºrzer zu tippen und einheitlich.
Sie k√∂nnen aber auch ein eigenes Namens-Schema nutzen;
was aber hilfreich ist, ist Konsistenz in der Benamung,
au√üerdem K√ºrze und aussagekr√§ftige Namen.

### Train- vs. Test-Sample

:::{#def-trainsample}
### Train-Sample
Den Datensatz, f√ºr die Sie sowohl UV *als auch AV* vorliegen haben, nennt man Train-Sample. $\square$
:::


Das Train-Sample stellt die bekannten Daten dar; aus denen k√∂nnen wir lernen, d.h. unser Modell berechnen.

:::{#def-testsample}
### Test-Sample
Den Datensatz, f√ºr den Sie *nur* Daten der UV, aber nicht zu der AV vorliegen haben, nennt man *Test-Sample*. $\square$
:::


Das Test-Sample  stellt das Problem der wirklichen Welt dar: Neue Beobachtungen, von denen man (noch) nicht wei√ü, was der Wert der AV ist.


Der Zusammenhang dieser verschiedenen, aber zusammengeh√∂rigen Arten von Stichproben ist in @fig-sample-types dargestellt.


```{mermaid}
%%| label: fig-sample-types
%%| fig-cap: Verschiedene Arten von zusammengeh√∂rigen Stichprobenarten im Rahmen einer Prognosemodellierung
flowchart TD
  S[Samples] 
  TS[Train-Sample]
  TT[Test-Sample]
  AS[Analyse-Sample]
  AssS[Assessment-Sample]

  S-->TT
  S-->TS
  TS-->AS
  TS-->AssS
  
```




## Praxisbezug

Ein Anwendungsbezug von moderner Datenanalyse ist es vorherzusagen, welche Kunden "abwanderungsgef√§hrdet" sind, 
also vielleicht in Zukunft bald nicht mehr unsere Kunden sind ("customer churn").
Es gibt eine ganze Reihe von Untersuchungen dazu, 
z.B. die von @lalwani_customer_2022.
Die Forschis versuchen anhand von Daten und u.a. auch der linearen Regression vorherzusagen, 
welche Kunden abgewandert sein werden. 
Die Autoren berichten von einer Genauigkeit von √ºber 80% in Ihrem (besten) Vorhersagemodell.


## Wie man mit Statistik l√ºgt

### Pinguine drehen durch

Ein Forscher-Team untersucht Pinguine von der [Palmer Station, Antarktis](https://pallter.marine.rutgers.edu/). 
Das Team ist am Zusammenhang von Schnabell√§nge (*bill length*) 
und Schnabeltiefe (*bill depth*) interessiert, s. @fig-peng-bill.


![Schnabell√§nge und Schnabeltiefe](https://allisonhorst.github.io/palmerpenguins/reference/figures/culmen_depth.png){#fig-peng-bill width="50%"}

Das Team hat in ~~schwei√ütreibender~~ eiszapfentreibender Arbeit $n=344$ Tiere
vermessen bei antarktischen Temperaturen. Hier sind die Daten:

::: {.content-visible when-format="html"}

```{r}
penguins <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/palmerpenguins/penguins.csv")
```
:::


::: {.content-visible when-format="pdf"}

```{r}
penguins_path <- paste0(
  "https://vincentarelbundock.github.io/",
  "Rdatasets/csv/palmerpenguins/penguins.csv")

penguins <- read.csv(penguins_path)
```
:::




### Analyse 1: Gesamtdaten

Man untersucht, rechnet und √ºberlegt. Ah! Jetzt haben wir es!
Klarer Fall: Ein *negativer* Zusammenhang von Schnabell√§nge und Schnabeltiefe. 
Das k√∂nnte einen Nobelpreis wert sein. Schnell publizieren!

```{r}
ggscatter(penguins, x = "bill_length_mm", y = "bill_depth_mm", 
          add = "reg.line")  # aus `ggpubr`
```

Hier sind die statistischen Details, s. @tbl-peng-simpson1.

```{r}
lm1 <- lm(bill_depth_mm ~ bill_length_mm, data = penguins)
```

```{r}
#| echo: false
#| label: tbl-peng-simpson1
#| tbl-cap: "Koeffizienten des Modells 1: Negativer Effekt von bill_length_mm"
parameters(lm1) |> print_md()
```



### Analyse 2: Aufteilung in Arten (Gruppen)

Kurz darauf ver√∂ffentlicht eine verfeindete Forscherin auch einen Aufsatz zum gleichen Thema. Gleiche Daten. 
Aber mit *gegenteiligem* Ergebnis: 
Bei *jeder Rasse* von (untersuchten) Pinguinen gilt: 
Es gibt einen *positiven* Zusammenhang von Schnabelll√§nge und Schnabeltiefe.

```{r}
ggscatter(penguins, x = "bill_length_mm", y = "bill_depth_mm", 
          add = "reg.line", color = "species")
```


Oh nein! Was ist hier nur los? Daten l√ºgen nicht, oder doch?


Hier sind die statistischen Details der zweiten Analyse, s. @tbl-peng-simpson2. 
Im zweiten Modell kam `species` als zweiter Pr√§diktor 
neu ins Modell (zus√§tlzich zur Schnabell√§nge).

```{r}
lm2 <- lm(bill_depth_mm ~ bill_length_mm + species, data = penguins)
```

```{r}
#| echo: false
#| label: tbl-peng-simpson2
#| tbl-cap: "Koeffizienten des Modells 2: Positiver Effekt von bill_length_mm"
parameters(lm2) |> print_md()
```



:::{.callout-caution}
### Daten alleine reichen nicht
Ohne Hintergrundwissen oder ohne weitere Analysen kann *nicht* entschieden werden,
welche Analyse -- Gesamtdaten oder Subgruppen -- die richtige ist.
Nicht-exprimentelle Studien k√∂nnen zu grundverschiedenen Ergebnissen f√ºhren,
je nachdem ob Pr√§diktoren dem Modell hinzugef√ºgt oder weggenommen werden. $\square$
:::




### Vorsicht bei der Interpretation von Regressionskoeffizienten

:::{.callout-important}
Interpretiere nie Modellkoeffizienten kausal ohne ein Kausalmodell.$\square$
:::

Nur wenn man die Ursache-Wirkungs-Beziehungen in einem System kennt,
macht es Sinn, die Modellkoeffizienten kausal zu interpretieren.
Andernfalls l√§sst man besser die Finger von der Interpretation der Modellkoeffizienten und
begn√ºgt sich mit der Beschreibung der Modellg√ºte und mit Vorhersage^[synonym: Prognose].
Wer das nicht glaubt, der betrachte @fig-confounder, links.^[[Quelle](https://data-se.netlify.app/2021/12/01/simulation-on-controlling-confounders/)]
Ei Forschi stellt das Modell `m1: y ~ x` auf und  interpretiert dann `b1`: "Ist ja klar, X hat einen starken positiven Effekt auf Y!".

In der n√§chsten Studie nimmt dis Forschi dann eine zweite Variable, `group` (z.B. Geschlecht) in das Modell auf: `m2: y ~ x + g`.
Oh Schreck! Jetzt ist `b1` auf einmal nicht mehr stark positiv, sondern praktisch Null, und zwar in jeder Gruppe, s. @fig-confounder, rechts!

Dieses Umschwenken der Regressionskoeffizienten kann *nicht* passieren,
wenn der Effekt "echt", also kausal, ist. 
Handelt es sich aber um "nicht echte", also nicht-kausale Zusammenh√§nge, um Scheinzusammenh√§nge also,
so k√∂nnen sich die Modellkoeffizienten dramatisch ver√§ndern (sogar das Vorzeichen kann wechseln^[das nennt man dann *Simpsons Paradox*]),
wenn man das Modell ver√§ndert, also Variablen hinzuf√ºgt oder aus dem Modell entfernt.

Wenn man die kausalen Abh√§ngigkeiten nicht kennt,
wei√ü man also nicht, ob die Zusammenh√§nge kausal oder nicht-kausal sind.
Man wei√ü also nicht, ob die Modellkoeffizienten belastbar, robust, stichhaltig sind oder nicht.

```{r}
#| echo: false
#| label: fig-confounder
#| fig-cap: "F√ºgt man in ein Modell eine Variable hinzu, k√∂nnen sich die Koeffizienten massiv √§ndern. In beiden Diagrammen wurden die gleichen Daten verwendet."
#| layout-ncol: 2
#| fig-subcap: 
#|   - "Modell: `y ~ x`, starker Zusammenhang; b1 ist stark positiv"
#|   - "Modell: `y ~ x + g`, in jeder der beiden Gruppen ist der Zusammenhang praktisch Null, b1 = 0"

n <- 100

set.seed(42)

d_sim <-
  tibble(
    x = rnorm(n, 0, 0.5),
    y = rnorm(n, 0, 0.5),
    group = "A"
  ) %>%
  bind_rows(
    tibble(
      x = rnorm(n, 1, 0.5),
      y = rnorm(n, 1, 0.5),
      group = "B")
  )

p_super_korr <- 
d_sim %>%
  ggplot(aes(x = x, y = y)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Oh yeah, super Korrelation!") +
  theme_minimal() +
  theme(plot.title = element_text(size = 16))

p_super_korr



d_sim %>%
  ggplot(aes(x = x, y = y, color = group)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(title = "Oh nein, in beiden Gruppen keine Korrelation!") +
  theme(legend.position = "bottom") +
  theme_minimal() +
  scale_color_okabeito() +
  theme(
    legend.position = c(0.97, 0.05),  # Adjust these values to position the legend
    legend.justification = c(1, 0)) +
  theme(plot.title = element_text(size = 16))
```


Man k√∂nnte h√∂chstens sagen, dass man (wenn man die Kausalstruktur nicht kennt) die Modellkoeffizienten nur *deskriptiv* interpretiert,
z.B. "Dort wo es viele St√∂rche gibt, gibt es auch viele Babies".^[Das St√∂rche-Babies-Beispiel passt auch zu @fig-confounder.]
Leider ist unser Gehirn auf kausale Zusammenh√§nge gepr√§gt: 
Es f√§llt uns schwer, Zusammenh√§nge nicht kausal zu interpretieren.
Daher werden deskriptive Befunde immer wieder unzul√§ssig kausal interpretiert -- von Laien und Wissenschaftlern auch.



## Fazit



In diesem Kapitel haben Sie lineare Modelle gelernt, 
die √ºber einfache Modelle der Art `y ~ x` hinausgehen. 
Dazu geh√∂ren multiple Modelle, 
das sind Modelle mit mehr als einer UV (Pr√§diktor) und auch Interaktionsmodelle.
Au√üerdem haben Sie sich mit einem Datensatz von
gesamtgesellschaftlichen Nutzen besch√§ftigt -- sehr sch√∂n.
Das Fallbeispiel zum Schluss war vielleicht erhellend insofern,
als dass ein gutes Modell im Train-Sample nicht (notwendig) zu guten Vorhersagen im Test-Sample f√ºhrt.




:::{.callout-important}
Wenn Sie dran bleiben an der Statistik, wird der Erfolg sich einstellen, s. @fig-dranbleiben. $\square$
:::


:::{#fig-dranbleiben layout-ncol=2}

![So ging es Ihnen gestern](img/meme-stat1.jpg){#fig-gestern}

![So wird es Ihnen morgen ergehen, wenn Sie dran bleiben](img/meme-stat2.jpg){#fig-morgen}

Statistik, Sie und Party: Gestern und (vielleicht) morgen.^[Quelle: imgflip,  <https://imgflip.com/memegenerator/Distracted-Boyfriend>]

:::

## Fallstudien

Die folgenden Fallstudien zeigen auf recht anspruchsvollem Niveau (bezogen auf diesen Kurs) beispielhalft zwei ausf√ºhrlichere Entwicklungen eines Prognosemodells.

Nutzen Sie diese Fallstudien, um sich intensiver mit der Entwicklung eines Prognosemodells auseinander zu setzen.

### New Yorker Flugversp√§tungen 2023

::: {.content-visible when-format="html"}

{{< video https://youtu.be/4hM6Z-yrduw >}}

[Source](https://aistudios.com/share/64eef3e7d6644f00142d7285)

:::

[Vorhersage von Flugversp√§tungen](https://datenwerk.netlify.app/posts/flights-delay-simplified//)


### Filmerl√∂se


[Vorhersagen von Filmerl√∂sen](https://data-se.netlify.app/2020/11/13/fallstudie-zur-regressionsanalyse-ggplot2movies/)

## Vertiefung


[Allison Horst](https://allisonhorst.com/linear-regression-dragons) erkl√§rt die lineare Regression mit Hilfe von Drachen. 
[üêâ]{.content-visible when-format="html"}  Sehenswert.


## Aufgaben

Die Webseite [datenwerk.netlify.app](https://datenwerk.netlify.app)^[<https://datenwerk.netlify.app>] stellt eine Reihe von einschl√§gigen √úbungsaufgaben bereit. Sie k√∂nnen die Suchfunktion der Webseite nutzen, um die Aufgaben mit den folgenden Namen zu suchen:


- [interpret-koeff-lm](https://datenwerk.netlify.app/posts/interpret-koeff-lm/interpret-koeff-lm.html) 
- [Aussagen-einfache-Regr](https://datenwerk.netlify.app/posts/aussagen-einfache-regr/aussagen-einfache-regr)
- [interpret-koeff](https://datenwerk.netlify.app/posts/interpret-koeff/interpret-koeff.html)
- [regression1b](https://datenwerk.netlify.app/posts/regression1b/regression1b.html)
- [mtcars-regr01](https://datenwerk.netlify.app/posts/mtcars-regr01/mtcars-regr01.html)
- [regression1a](https://datenwerk.netlify.app/posts/regression1a/regression1a.html)
- [lm1](https://datenwerk.netlify.app/posts/lm1/lm1.html)
- [Regression5](https://datenwerk.netlify.app/posts/regression5/regression5)
- [Regression6](https://datenwerk.netlify.app/posts/regression6/regression6)
- [lm-mario1](https://datenwerk.netlify.app/posts/lm-mario1/lm-mario1.html)
- [lm-mario2](https://datenwerk.netlify.app/posts/lm-mario2/lm-mario2.html)
- [lm-mario3](https://datenwerk.netlify.app/posts/lm-mario3/lm-mario3.html)
- [ausreisser1](https://datenwerk.netlify.app/posts/ausreisser1/ausreisser1.html)
- [mario-compare-models](https://datenwerk.netlify.app/posts/mario-compare-models/)

## Literaturhinweise

Wenn es ein Standardwerk f√ºr Regressionsanalyse geben k√∂nnte, 
dann vielleicht das neueste Buch von Andrew Gelman, ein  bekannter Statistiker [@gelman_regression_2021].
Sein Buch ist f√ºr Sozialwissenschaftler geschrieben, 
also nicht f√ºr typische Nerds, hat aber deutlich mehr Anspruch als dieses Kapitel.



## Literatur
