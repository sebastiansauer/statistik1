{
  "hash": "7a013baee940a1c5091642b1481583b9",
  "result": {
    "markdown": "# Daten einlesen \n\n\n\n\n\n\n\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-2_6b1e41ccf2ba62959a61d772e592460c'}\n<style type=\"text/css\">\n.justify {\n  text-align: justify !important\n}\n\n.centered {\n  text-align-last: center;\n}\n\n.xlarge {\n  font-size: 300%;\n}\n</style>\n:::\n\n\n\n\n## Lernsteuerung\n\n### Standort im Lernpfad\n\nAbb. @fig-ueberblick-r zeigt den Standort dieses Kapitels im Lernpfad und gibt damit einen Überblick über das Thema dieses Kapitels im Kontext aller Kapitel.\n\n\n\n### Standort im Lernpfad\n\nAbb. @fig-ueberblick-r zeigt den Standort dieses Kapitels im Lernpfad und gibt damit einen Überblick über das Thema dieses Kapitels im Kontext aller Kapitel.\n\n\n\n\n```{mermaid}\n%%| fig-cap: Überblick über den Inhalt und Verlauf des Buches\n%%| label: fig-ueberblick-r\n%%| out-width: \"100%\"\n\n\nflowchart LR\n  subgraph R[Rahmen]\n    direction LR\n    subgraph V[Vorbereiten]\n      direction TB\n      E[<font size=5>**Einlesen**] --> Um[Umformen]\n    end\n    subgraph M[Modellieren]\n      direction TB\n      M1[Punktmodelle] --> Vis[Verbildlichen]\n      Vis --> U[Ungewissheit]\n      U --> G[Geradenmodelle]\n    end\n    subgraph N[Nachbereiten]\n      direction TB\n      D[Antworten diskutieren]\n    end\n  V --> M\n  M --> N\n  end\n  \n\n```\n\n::: {.cell hash='R_cache/html/unnamed-chunk-4_83cec9c82663726d1a3a47b5a3c76c4f'}\n\n:::\n\n\n\n### Lernziele\n\n\n- Sie können R und RStudio starten.\n- Sie können R-Pakete installieren und starten\n- Sie können Variablen in R zuweisen und auslesen.\n- Sie können Daten in R importieren.\n- Sie können den Begriff *Reproduzierbarkeit* definieren.\n\n\n\n\n\n\n\n\n\n### Überblick\n\n\nAbb. @fig-ueberblick zeigt Ihnen, wo auf unserer Reise durch die Datenanalyse sich dieses Kapitels verorten lässt.\n\n\n### Benötigte R-Pakete\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-5_545f8a4ceab04c27faa8be1e04cf59d0'}\n\n```{.r .cell-code}\nlibrary(easystats)\n```\n:::\n\n\n\n\n### Begleitvideos\n\nSchauen Sie sich mal in [dieser Playlist](https://www.youtube.com/playlist?list=PLRR4REmBgpIEaIyeNBgNGPgmhQJ_T1y8_) um,\ndort finden Sie einige Videos zum Thema R.\n\n## Errrstkontakt\n\n\n### Warum R?\n\n\nGründe, die für den Einsatz von R sprechen:\n\n1. 🆓 R ist kostenlos, andere Softwarepakete für Datenanalyse sind teuer. 💸\n2. 📖 R und R-Befehle sind quelloffen, d.h. man kann sich die zugrundeliegenden Computerbefehle anschauen. Jeder kann prüfen, ob es vernünftig arbeitet. Jeder kann beitragen.\n\n3. 🆕 R hat die neuesten Methoden.\n\n4. 🫂R hat eine große Community.\n\n5. 🪡 R ist maßgeschneidert für Datenanalyse.\n\n\nAllerdings gibt es auch abweichende Meinungen, s. @fig-bill-excel.\n\n![Nicht jeder ist R-Freund](img/bill-gates-excel.jpg){#fig-bill-excel width=\"50%\"}\n\n\n\n\n### R und Reproduziberkeit\n\n\n:::{#def-repro}\n\n### Reproduzierbarkeit\n\n\nEin (wissenschaftlicher) Befunde ist reproduzierbar, wenn andere Analystis mit dem gleichen experimentellen Setup zum gleichen Ergebnis (wie in der ursprünglichen Analyse) kommen [@plesser_reproducibility_2018]. $\\square$\n:::\n\n\n\n{{< https://www.nationalacademies.org/our-work/reproducibility-and-replicability-in-science >}}\n\n\n\n\n@def-repro ist, etwas überspitzt, in @fig-repro wiedergegeben.\n\n\n::: {.cell hash='R_cache/html/fig-repro_e0e41675a61015423a34cd1c2366313d'}\n::: {.cell-output-display}\n![Daten + Syntax + genaue Beschreibung der Messungen = reproduzierbar](R_files/figure-html/fig-repro-1.png){#fig-repro width=672}\n:::\n:::\n\n\n\n\n\n:::{#exm-repro}\n\n\n### Aus der Forschung: Reproduzierbarkeit in der Psychologie\n\n>   🧑‍🎓 Wie ist es um unsere Wissenschaft, Psychologie, bestellt? Haben die Befunde Hand und Fuß?\n\n\n@obels_analysis_2020 haben die Reproduzierbarkeit in psychologischen Studien untersucht. \nSie berichten folgendes Ergebnis\n\n>   We examined data and code sharing for Registered Reports published in the psychological\nliterature from 2014 to 2018 and attempted to independently computationally reproduce the main results in each\narticle. Of the 62 articles that met our inclusion criteria, 41 had data available, and 37 had analysis scripts available.\nBoth data and code for 36 of the articles were shared. We could run the scripts for 31 analyses, and we reproduced the\nmain results for 21 articles. $\\square$\n\n\n\n:::\n\n\n\n\n\n## Architektur von R\n\n\n### R & RStudio\n\n\n:::: {.columns}\n\n\n\n::: {.column width=\"40%\"}\n\n![](img/R-logo.png){width=\"20%\"}\n:::\n\n\n\n::: {.column width=\"20%\"}\n:::{.xlarge}\n💖\n:::\n:::\n\n\n\n::: {.column width=\"40%\"}\n\n![](img/rlogo.png){width=\"40%\"}\n:::\n\n\n::::\n\n\n\n@ismay_statistical_2020 zeigen eine schöne Analogie, was der Unterschied von *R* und *RStudio* ist, s. @fig-r-rstudio.\n\n\n\n::: {.cell hash='R_cache/html/fig-r-rstudio_a3b23e6c3ae3bf81a55fb165e0457f52'}\n::: {.cell-output-display}\n![R vs. RStudio](img/r_vs_rstudio_1.png){#fig-r-rstudio width=758}\n:::\n:::\n\n\n\nWir verwenden beide Programme. Aber wir *öffnen* nur RStudio. \nRStudio findet selbständig R und öffnet diese \"heimlich\".\nÖffnen Sie nicht noch extra R (sonst wäre R zweifach geöffnet).\n\n\nHier ein Screenshot von der Oberfläche von RStudio, s.  @fig-rstudio.\n\n\n![So sieht RStudio aus](img/rstudio.png){#fig-rstudio}\n\n\n\n### R-Studio Cloud\n\n\nRStudio Cloud ist ein Webdienst von RStudio (zum Teil kostenlos).\nMan kann damit online mit R arbeiten. Die Oberfläche ist praktisch identisch zur \nDesktop-Version, s. @fig-rstudio-cloud.\nEin Vorteil ist, dass man als Nutzer nichts installieren muss.\n\n![So sieht RStudio Cloud aus. Genau wie RStudio Desktop](img/rstudio-cloud.png){#fig-rstudio-cloud}\n\n\n### Installation\n\nLesen Sie [hier](https://data-se.netlify.app/2021/11/30/installation-von-r-und-seiner-freunde/#installation) die Installation von R und seiner Freunde nach.\n\n\n\n\n### R-Pakete\n\n\nTypisch für R ist sein modularer Aufbau: Man kann eine große Zahl an Erweiterungen (\"Pakete\") installieren, alle kostenlos.\n\nIn R Paketen \"wohnen\" Funktionen, also Dinge, die R kann, wenn das Paket verfügbar ist.\n\nMan kann sich daher ein R-Paket vorstellen wie ein Buch:\nWenn R es gelesen hat, dann kennt es die Inhalte.\nDiese Inhalte könnten irgendwelche Formeln, also Berechnungen sein.\nEs könnte aber die \"Bauanleitung\" für ein schönes Diagramm sein.\n\nIst ein spezielles R-Paket auf Ihrem Computer vorhanden,\nso können Sie diese Funktionalität nutzen.\n\n\nDie Zahl an diesen \"Paketen\" ist groß; zur Verdeutlichung s. @fig-ship.\n\n![Containershiff, Corey Seeman, CC-BY-NC 20, Flickr.com](img/11102039694_d42ca1ff1c_c.jpg){#fig-ship width=\"50%\"}\n\n\n\n*Erweiterungen* kennt man von vielen Programmen, sie werden auch *Add-Ons*, *Plug-Ins* oder sonstwie genannt.\n\nMan siehe zur Verdeutlichung Erweiterungen beim Broswer Chrome, @fig-chrome.\n\n![Erweiterungen beim Browser Chrome](img/chrome-extensions.png){#fig-chrome width=\"50%\"}\n\n\n\nDie Anzahl der R-Pakete ist groß; allein auf dem \"offiziellen Web-Store\" (nennt sich \"CRAN\") von R \ngibt es ca. 20,000 Pakete (@fig-cran); [Stand: 2022; Quelle](https://gist.github.com/daroczig/3cf06d6db4be2bbe3368)).\n\n![Die Anzahl der R-Pakete ist expoenziell gewachsen](img/number-of-submitted-packages-to-CRAN.png){#fig-cran}\n\n\n\n\n\n#### Pakete installieren {#install-r-pckgs}\n\nWie jede Software muss man Pakete (Erweiterungen für R) erst einmal installieren,\nbevor man sie verwenden kann.\nJa, einmal installieren reicht.\n\nDas geht komfortabel, wenn man beim Reiter *Packages* auf *Install* klickt (s. @fig-install-packages).\n\n![Klicken Sie auf \"Install\" im Reiter \"Packages\", um R-Pakete zu installieren](img/install-packages.png){#fig-install-packages}\n\n\n![So kann man R-Pakete installieren in RStudio](img/install-pckgs.gif){width=\"50%\"}\n\n\nDann öffnet sich ein Menü, wo man die Namen der gewünschten R-Pakete eingeben kann (s. Abbildung @fig-install-packages2).\n\n\n![Hier den oder die Namen der gewünschten R-Pakete eingeben](img/install-packages2.png){#fig-install-packages2 width=\"25%\"}\n\n\n>   🧑‍🎓Welche R-Pakete sind denn schon installiert?\n\n\nIm Reiter *Packages* können Sie nachschauen, welche Pakete \nauf Ihrem Computer schon installiert sind.\nDiese Pakete brauchen Sie logischerweise dann *nicht* noch mal installieren.\n\n\n\n>   🧑‍🎓Ja, aber welche R-Pakete \"soll\" ich denn installieren, welche brauch ich denn?\n\nIm Moment sollten Sie die folgenden Pakete installiert haben:\n\n- `tidyverse`\n- `easystats` \n\n\nWenn Sie die noch nicht installiert haben sollten,\ndann können Sie das jetzt ja nachholen.\n\n\n\n#### Pakete starten\n\n\nWenn Sie ein Softwareprogramm - nichts anderes sind R-Pakete - installiert haben,\nmüssen Sie es noch *starten*.\n\nMerke: Ein bestimmtes Paket muss man nur einmalig installieren.\nAber man muss es jedes Mal neu starten, wenn man R (bzw. RStudio) startet.\n\nSie erkennen leicht, ob ein Paket gestartet ist, wenn Sie ein Häkchen vor dem\nNamen des Pakets in der Paketliste (Reiter *Packages*) sehen, s. Abbildung \\@ref(fig:install-packages).\n\n\n\n[Dieses Video](https://www.youtube.com/watch?v=Yej9xzKQ3yI&list=PLRR4REmBgpIEaIyeNBgNGPgmhQJ_T1y8_&index=26) verdeutlicht den Unterschied zwischen *Installation* und *Starten* eines R-Pakets. \n\n### Projekte in R\n\n\nEin *Projekt* in RStudio ist letztlich ein Ordner, \nder als \"Basis\" für eine Reihe von Dateien verwendet wird.\nSagen wir, das Projekt heißt `cool_stuff`. \nRStudio legt uns diesen Ordner an einem von uns gewählten Platz auf unserem Computer an.\nDas ist ganz praktisch, weil man dann sagen kann \"Hey R, nimmt die Datei 'daten.csv'\", \nohne einen Pfad anzugeben.\nVorausgesetzt, die Datei liegt auch im Projektordner (`cool_stuff`).\n\nProjekte kann anlegen mit Klick auf das Icon, das einen Quader mit dem Buchstaben R darin anzeigt (s. @fig-rstudio-projekte).\n\n\n![RStudio-Projekte, Beispiele](img/rstudio-projekte.png){#fig-rstudio-projekte width=\"20%\"}\n\n\n\n\n\n\n### Skriptdateien\n\nDie R-Befehle (\"Syntax\") schreiben Sie am besten in eine speziell dafür \nvorgesehene Textdatei in RStudio.\nEine Sammlung von (R-)Befehlen nennt man auch ein *Skript*,\ndaher spricht man auch von einer *Skriptdatei*.\nUm eine neue R-Skriptdatei zu öffnen, klicken Sie auf das Icon,\ndas ein weißes Blatt mit einem grünen Pluszeichen zeigt, s.\n@fig-script-new.\n\n\n![So erstellen Sie eine neue Skriptdatei](img/script-new.png){#fig-script-new width=\"50%\"}\n\n\nVergessen Sie nicht zu speichern,\nwenn Sie ein tolles Skript geschrieben haben.\nDafür gibt es mehrere Möglichkeiten:\n\n- Strg+S\n- Menü: File > Save\n- Klick auf das Icon mit der Diskette, s. @fig-script-new.\n\n\nEine Skriptdatei können Sie in typischer Manier öffnen:\n\n- Strg+O\n- Klick auf das Icon mit der Akte und dem grünen Pfeil (vgl.  @fig-script-new)\n- Menü: File > Open File...\n\n\n## Grundlagen von R\n\n\n### Variablen {#sec-rvars}\n\nIn jeder Programmiersprache kann man Variablen definieren,\nso auch in R:\n\n\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-7_8bc74b7e623c7e25263613dccda5d866'}\n\n```{.r .cell-code}\nrichtige_antwort = 42\nfalsche_antwort = 43\ntyp = \"Antwort\"\nist_korrekt = TRUE\n```\n:::\n\n\n\nAlternativ zum Gleichheitszeichen `=` können Sie auch (synonym) den Zuweisungspfeil `<-` verwenden. \nBeides führt zum gleichen Ergebnis. Allerdings ist der Pfeil präziser, \nund sollte daher bevorzugt werden.\n\nDer *Zuweisungspfeil* `<-` bzw. das Gleichheitszeichen `=` definiert eine neue *Variable* (oder überschreibt den Inhalt,\nwenn die Variable schon existiert).\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-8_af73bd00fee86c3d2dded5bd82c74a0f'}\n\n```{.r .cell-code}\nrichtige_antwort <- 42\nfalsche_antwort <- 43\ntyp <- \"Antwort\"\nist_korrekt <- TRUE\n```\n:::\n\n\n\n[Dieses Video](https://www.youtube.com/watch?v=TKQk-tEF9YQ&list=PLRR4REmBgpIEaIyeNBgNGPgmhQJ_T1y8_&index=28) und [dieses Video](https://www.youtube.com/watch?v=Nal0m_AmMwg&list=PLRR4REmBgpIEaIyeNBgNGPgmhQJ_T1y8_&index=48) geben eine Einführung in das Definieren von Variablen in R.\n\n\nSie können sich eine Variable wie einen Becher oder Behälter vorstellen,\nder bestimmte Werte enthält. \nAuf dem Becher steht (mit Edding geschrieben) der Name des Bechers.\nNatürlich können Sie die Werte aus dem Becher entfernen und sie\ndurch neue ersetzen (vgl. @fig-def-vars).\n\n\n![Variablen zuweisen](img/Variablen_zuweisen.png){#fig-def-vars width=\"25%\"}\n\n\n\n\n\nR kann übrigens auch rechnen:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-9_39ca009e0827b97ed46c6615bf44c7ae'}\n\n```{.r .cell-code}\ndie_summe <- falsche_antwort + richtige_antwort\n```\n:::\n\n\n\n\n\n\n\n\nAber was ist jetzt der Wert, der \"Inhalt\" der Variable `die_summe`? \n\nUm den Wert, d.h. den Inhalt einer Variablen in R *auszulesen*, \ngeben wir einfach den Namen des Objekts ein:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-10_e4276e452f7880b6c1bd5b7009de505b'}\n\n```{.r .cell-code}\ndie_summe\n## [1] 85\n```\n:::\n\n\n\nWas passiert wohl, wenn wir `die_summe` jetzt wie folgt definieren:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-11_28e001f54fefa8f3518e974e8640001e'}\n\n```{.r .cell-code}\ndie_summe <- falsche_antwort + richtige_antwort + 1\n```\n:::\n\n\n\nWer hätt's geahnt:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-12_bca9fae538c3f9d47311e8a3236e3f0e'}\n\n```{.r .cell-code}\ndie_summe\n## [1] 86\n```\n:::\n\n\n\n\nVariablen können auch \"leer\" sein:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-13_6a69c034d0211f10fa890cfe3d8136f1'}\n\n```{.r .cell-code}\nalter <- NA\nalter\n## [1] NA\n```\n:::\n\n\n`NA` steht für *not available*, nicht verfügbar und macht deutlich, dass hier ein Wert fehlt.\n\n>    🧑‍🎓 Wozu brauche ich bitte fehlende Werte?!\n\nFehlende Werte sind ein häufiges Problem in der Praxis.\nVielleicht hat sich die befragte Person geweigert, ihr Alter anzugeben^[Datenschutz!]. Oder als Sie die Daten in Ihren Computer eingeben wollten, ist Ihre Katze über die Tastatur gelaufen und alles war futsch...\n\n\n\n\n### Funktionen - \"Befehle\"\n\n\n\n#### Vektoren\n\nDas, was R kann, ist in \"Funktionen\" hinterlegt.\nEin Beispiel für eine solche Funktion könnte sein: \n\"Berechne den Mittelwert\" (schauen wir uns gleich an). \n\nEin weiteres Beispiel für eine Funktion ist:\n\"Erstelle eine Liste (Vektor) von Werten\".\n\nDas geht so:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-14_97f824118f1a92f4be01ad926058dc5d'}\n\n```{.r .cell-code}\nAntworten <- c(42, 43)\n```\n:::\n\n\n\n\nDer Befehl `c` (c wie *c*ombine) fügt mehrere Werte zusammen zu einer \"Liste\" (einem Vektor).\n\nMit dem Zuweisungspfeil geben wir dieser Liste einen Namen, hier `Antworten`. \nDiese Liste besteht aus zwei Werten, zuerst `42`, dann kommt `43`.\n\n\n\n#### Unsere erste statistische Funktion\n\n\nJetzt wird's ernst. Jetzt kommt die Statistik.\nBerechnen wir also unsere erste statistische Funktion:\nDen Mittelwert. Puh.\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-15_7de4ad2990bad80ee0ed24332c7f9538'}\n\n```{.r .cell-code}\nmean(Antworten)\n## [1] 42.5\n```\n:::\n\n\nSie hätten `Antworten` auch durch `c(42, 43)` ersetzen können,\nso haben Sie ja schließlich die Variable gerade definiert.\n\nR arbeitet so einen \"verschachtelten\" Befehl *von innen nach außen* ab:\n\n\nStart: `mean(Antworten)`\n\n      ⬇️ \n\nSchritt 1: `mean(c(42, 43))`\n\n      ⬇️ \n\nSchritt 2: `42.5`\n\n\n#### Schema einer Funktion\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-16_cd675d0a93c3b8fa33b2ae27c867f8cd'}\n\n:::\n\n\n@fig-function-schema stellt eine Funktion schematisch dar.\n\n\n\n![Schema einer Funktion](img/function-schema){#fig-function-schema}\n\n\n\n\nEine Funktion hat einen oder mehrere *Inputs*,\ndas sind Daten oder Verarbeitungshinweise, die man in die Funktion `fun` *eingibt*, bevor sie loslegt.\nEine Funktion hat immer (genau) eine *Ausgabe* (Output),\nin der das Ergebnis einer Funktion ausgegeben wird.\n\n:::{#def-args}\n\n### Argumente einer Funktion\n\nDie \"Trichter\" einer (R-)Funktion, in denen man die Eingaben \"einfüllt\",\nnennt man auch *Argumente*.$\\square$\n:::\n\nSo hat die Funktion `mean()` z.B. folgende Argumente:\n\n`mean(x, trim = 0, na.rm = FALSE, ...)`\n\n- `x`: das ist der Vektor, für den der Mittelwert berechnet werden soll\n- `trim = 0`: Sollen die extremsten Werte von `x` lieber \"abgeschnitten\" werden, also nicht in die Berechnung des Mittelwerts einfließen?\n- `na.rm = FALSE`: Wie soll mit fehlenden Werten `NA` umgegangen werden? Im Standard liefert `mean`^[und viele andere arithmetische Funktionen in R] `NA` zurück. R schwenkt sozusagen die rote Fahne, um zu signalisieren, Achtung, Mensch, hier ist irgendwas nicht in Ordnung. Setzt man aber `na.rm = TRUE`, dann entfernt (remove, rm) R die fehlenden Werte und berechnet den Mittelwert.\n- `...` heißt \"sonstiges Zeugs, das manchmal eine Rolle spielen könnte\"; darum kümmern wir uns nicht.\n\nEinige Argumente haben einen *Standardwert* bzw. eine *Voreinstellung* (default).\nSo wird bei der Funktion `mean` im Standard nicht getrimmt (`trim = 0`) und fehlende Werte werden nicht entfernt (`na.rm = FALSE)`.\n\n:::{.callout-note}\nWenn ein R-Befehl ein Argument mit Voreinstellung hat,\nbrauchen Sie dieses Argument nicht zu befüllen. \nIn dem Fall wird auf den Wert der Voreinstellung zurückgegriffen.\nArgumente ohne Voreinstellung - wie `x` bei `mean()` - müssen Sie aber auf jeden Fall mit einem Wert befüllen.\n:::\n\nSagen wir, wir haben einen fehlenden Wert in unseren Daten:\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-17_b364ae9c0f945d1b90909228fa4b04cd'}\n\n```{.r .cell-code}\nAntworten <- c(42, 43, NA)\nAntworten\n## [1] 42 43 NA\n```\n:::\n\n\nWenn wir jetzt den Mittelwert berechnen wollen,\nquittiert R das mit einem schnöden `NA`:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-18_5f6cb4d6c77c241681c4020d3964c41b'}\n\n```{.r .cell-code}\nmean(Antworten)\n## [1] NA\n```\n:::\n\n\nR meint es gut mit Ihnen^[>   🤖 Naja, manchmal.]. Stellen Sie sich vor, \ndass R Sie auf dieses Problem aufmerksam machen möchte: \n\n>   🤖 Achtung, lieber Herr und Gebieter, du hast nicht mehr alle Latten am Zaun, will sagen, alle Daten im Vektor!\n\n(Danke, R.)\n\n\nMöchten Sie aber lieber R dieses Verhalten austreiben, so befüllen Sie das Argument `na.rm` mit dem Wert `TRUE`.\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-19_1b306df54fcdde20595623e71fc8fe8f'}\n\n```{.r .cell-code}\nmean(Antworten, na.rm = TRUE)\n## [1] 42.5\n```\n:::\n\n\n\nBei jedem R-Befehl haben die Argumente eine bestimmte Reihenfolge,\netwa bei `mean()`: `mean(x, trim = 0, na.rm = FALSE, ...)`.\n\n(Nur) wenn man die Argumente in ihrer vorgegebenen Reihenfolge anspricht,\nmuss man *nicht* den Namen des Arguments anführen:\n\n✅  `mean(Antworten, 0, FALSE)` \n\nHält man sic aber nicht an die vorgebene Reihenfolge,\nso weiß R nicht, was zu tun ist und flüchtet sich in eine Fehlermeldung:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-20_663d89a65c570f7393c8e48037604d3f'}\n\n```{.r .cell-code}\nmean(Antworten, FALSE, 0)  # FALSCH, DON'T DO IT 🙅‍♀️\n## Error in mean.default(Antworten, FALSE, 0): 'trim' must be numeric of length one\n```\n:::\n\n\nWenn man die Namen der Argumente anspricht, ist die Reihenfolge egal:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-21_efad7958531e0c09e242195fee1d4f31'}\n\n```{.r .cell-code}\nmean(na.rm = FALSE, x = Antworten)\nmean(trim = 0, x = Antworten, na.rm = TRUE)\n```\n:::\n\n\nÜbrigens: \nLeerzeichen sind R fast immer egal. \nAus Gründen der Übersichtlichkeit sollte man aber Leerzeichen verwenden. \nIn diesen Fällen sind Leerzeichen nicht erlaubt:\n\n- `<-`\n- `<=` etc.\n- Variablennamen\n\n\n\n### Häufige Fragen\n\n- *Wo finde ich Hilfe zu einer bestimmten Funktion, z.B. `fun()`*? Geben Sie dazu folgenden R-Befehl ein: `help(fun)`.\n- *In welchem Paket wohnt meine R-Funktion*? Suchen Sie nach der Funktion [auf dieser Seite](https://www.rdocumentation.org/).\n- *Ich weiß nicht, wie der R-Befehl funktioniert*? Vermutlich haben andere Ihr Problem auch, und meistens hat irgendwer das Problem schon gelöst. Am besten suchen Sie mal auf [Stackoverflow](www.stackoverflow.com).\n- *Ich muss mal grundlegend verstehen, wozu ein bestimmten R-Paket gut ist. Was tun*? Lesen Sie die Dokumenation (\"Vignette\") eines R-Pakets durch. Für das Paket `dplyr` bekommen Sie so einen Überblick über die verfügbaren Vignetten diese Pakets: `vignette(package = \"dplyr\")`. Dann suchen Sie sich aus der angezeigten Liste eine Vignette raus; mit `vignette(\"rowwise\")` können Sie sich dann die gewünschte Vignette (z.B. `rowwise`) anzeigen lassen.\n\n\n\n## Daten importieren\n\n\n### Wo sind meine Daten?\n\nDamit Sie eine Datendatei importieren können, müssen Sie wissen, \nwo die Datei ist.\n\nSchauen wir uns zwei Möglichkeiten an,\nwo eine Datei liegen könnte.\n\n1. Irgendwo im Internet, z.B. [hier](https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv)\n2. Irgendwo auf Ihrem Computer, z.B. in Ihrem Projektordner\n\nIn beiden Fällen wird der \"Aufenthaltsort\" der Datei durch den Pfad (in welcher Ordnerhierarchie?) und den Namen definiert.\n\n:::{.callout-note}\nWir werden in diesem Kurs häufiger mit dem Daten `mariokart` arbeiten;\nSie finden ihn [hier](https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv).^[Auf [dieser Webseite](https://vincentarelbundock.github.io/Rdatasets/articles/data.html) finden Sie eine große Zahl an Datensätzen. Nur für den Fall, dass Ihnen langweilig ist.]\n:::\n\n\n\n\n### Gebräuchliche Formate\n\n\nDaten werden in verschiedenen Formaten im Computer abgespeichert;\nTabellen häufig als \n\n- Excel-Datei\n- CSV-Datei\n\nIn der Datenanalyse ist das gebräuchlichste Format für Daten in Tabellenform die *CSV-Datei*.\nDas hat den Grund, weil dieses Format technisch schön einfach ist.\nFür uns Endverbraucher tut das nichts groß zur Sache, die CSV-Datei beherbergt \neinfach eine brave Tabelle in einer *Textdatei*, sonst nichts.\n\n\n🏋️‍♀️ Öffnen Sie mal eine CSV-Datei mit einem *Texteditor* (nicht mit Word und auch nicht mit Excel). Schauen Sie sich gut an, was Sie dort sehen und erklären Sie die Datenstruktur.\n\n\n### Einlesen aus einem R-Paket\n\nIhr Datensatz schon in einem R-Paket gespeichert,\nkönnen Sie ihn aus diesem R-Paket starten. \nDas ist die bequemste Option.\nZum Beispiel \"wohnt\" der Datensatz `mariokart` im \nR-Paket `openintro`.\n\n:::callout-tip\nEin häufiger Fehler ist, dass man vergisst,\ndass man zuerst ein R-Paket installieren muss,\nbevor man es nutzen kann.\nAuf der anderen Seite muss man ein R-Paket (wie andere Software auch)\nnur ein Mal installieren - das Paket muss man ein Paket nach jedem Neustart von RStuio mit `library()` starten.\n:::\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-22_6e6217069dac4b9b3a6bcd94c3a10566'}\n\n```{.r .cell-code}\ndata(\"mariokart\", package = \"openintro\")\n```\n:::\n\n::: {.cell hash='R_cache/html/unnamed-chunk-23_1cd08df3422d98a9d2ac4f09bf71e45b'}\n\n:::\n\n\n \n\n### Einlesen von einer Webseite\n\nSo importieren Sie eine Tabelle von einer Webseite (URL) in R:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-24_ab5ab69742ad42f7431fd0fa437654ee'}\n\n```{.r .cell-code}\nlibrary(easystats)  # Das Paket muss installiert sein\nd <- data_read(\"https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv\")\n```\n:::\n\n\n\nSchauen wir uns die R-Syntax en Detail an:\n\n```\nHey R,\nhol das \"Buch\" easystats aus der Bücherei und lies es\ndefiniere als \"d\" die Tabelle,\ndie du unter der angegebenen URL findest.\n```\n\nEs ist egal,\nwelchen Namen Sie der Tabelle geben.\nIch nehme oft `d`, *d* die Daten. Außerdem ist es kurz,\nmuss man nicht so viel tippen.\n\nWerfen wir einen Blick in die Tabelle (engl. *to glimpse*):\n\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-25_15a94789f0459524bbe92730a1cf92d4'}\n\n```{.r .cell-code}\nglimpse(d)\n## Rows: 143\n## Columns: 12\n## $ id          <dbl> 150377422259, 260483376854, 320432342985, 280405224677, 17…\n## $ duration    <int> 3, 7, 3, 3, 1, 3, 1, 1, 3, 7, 1, 1, 1, 1, 7, 7, 3, 3, 1, 7…\n## $ n_bids      <int> 20, 13, 16, 18, 20, 19, 13, 15, 29, 8, 15, 15, 13, 16, 6, …\n## $ cond        <fct> new, used, new, new, new, new, used, new, used, used, new,…\n## $ start_pr    <dbl> 0.99, 0.99, 0.99, 0.99, 0.01, 0.99, 0.01, 1.00, 0.99, 19.9…\n## $ ship_pr     <dbl> 4.00, 3.99, 3.50, 0.00, 0.00, 4.00, 0.00, 2.99, 4.00, 4.00…\n## $ total_pr    <dbl> 51.55, 37.04, 45.50, 44.00, 71.00, 45.00, 37.02, 53.99, 47…\n## $ ship_sp     <fct> standard, firstClass, firstClass, standard, media, standar…\n## $ seller_rate <int> 1580, 365, 998, 7, 820, 270144, 7284, 4858, 27, 201, 4858,…\n## $ stock_photo <fct> yes, yes, no, yes, yes, yes, yes, yes, yes, no, yes, yes, …\n## $ wheels      <int> 1, 1, 1, 1, 2, 0, 0, 2, 1, 1, 2, 2, 2, 2, 1, 0, 1, 1, 2, 2…\n## $ title       <fct> \"~~ Wii MARIO KART &amp; WHEEL ~ NINTENDO Wii ~ BRAND NEW …\n```\n:::\n\n\n\n[Hier](https://vincentarelbundock.github.io/Rdatasets/doc/openintro/mariokart.html) findet sich eine Erklärung des Datensatzes.\n\n\n![Download einer Datendatei (CSV-Format) von einer Webseite](img/download-csv.gif)\n\n\n\n\n### Importieren von Ihrem Computer\n\nStellen Sie zuerst sicher, dass sich die Datendatei in Ihrem RStudio-Projektordner befindet.\nDann können Sie die Datei einfach so importieren:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-26_aa15bc06a59c70af4a8a26ed9cc90572'}\n\n```{.r .cell-code}\nd <- data_read(\"mariokart.csv\")\n```\n:::\n\n\n\n[Dieses Video](https://youtu.be/B_nuN-M0pQM) erklärt die Schritte des Importierens einer Datendatei von Ihrem Computer.\n\n:::{.callout-note}\nEs gibt verschiedene Formate, in denen (Tabellen-)Dateien in einem Computer abgespeichert werden.\nDie gebräuchlichsten sind CSV und Excel.\nPraktischerweise kann der R-Befehl `data_read()` viele verschiedene Formate automatisch einlesen, so dass wir uns nicht weiter um das Format kümmern brauchen.\n:::\n\n## Logikprüfung\n\n\n>   🧑‍🎓 Wer will schon wieder wen prüfen?!\n\nIn diesem Abschnitt schauen wir uns *Logikprüfungen* an: \nWir lassen R prüfen, ob eine Variable einen bestimmten Wert hat oder größer/kleiner als ein Referenzwert ist.\n\n\nDefinieren wir zuerst eine Variable, `x`.\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-27_23f4893d00aa6165a1f707eb21b49a47'}\n\n```{.r .cell-code}\nx <- 42\n```\n:::\n\n\nDann fragen wir R, ob diese Variable den Wert `42` hat.\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-28_d71fea9053024ad7970580030dab8eb2'}\n\n```{.r .cell-code}\nx == 42\n## [1] TRUE\n```\n:::\n\n\n>   🤖 Hallo, Mensch. Ja, diese Variable hat den Wert R.\n\n(Danke, R.)\n\nMöchte man mit R prüfen, ob eine Variable `x` einen bestimmten `Wert` (\"Inhalt\") hat, so schreibt man:\n\n`x == Wert`.\n\n:::{.callout-important}\nMan beachte das *doppelte* Gleichheitszeichen! Zur Prüfung auf Gleichheit muss man das doppelte Gleichheitszeichen verwenden.\n:::\n\n:::{.callout-caution}\nEin beliebter Fehler ist es, bei der Prüfung auf Gleichheit, nur ein Gleichheitszeichen zu verwenden, z.B. so: `x = 73`.\nMit einem Gleichheitszeichen prüft man aber *nicht* auf Gleichheit,\nsondern man definiert die Variable, s. @sec-rvars.\n:::\n\nPrüfungen mit dem logischen UND bzw. ODER sind in @XXX erläutert.\n\n\n@tbl-lgl gibt einen Überblick über wichtige Logikprüfungen in R.\n\n\n::: {#tbl-lgl .cell tbl-cap='Logische Prüfungen in R' hash='R_cache/html/tbl-lgl_6d38b98704665dffefa1bc90cdcf5dfe'}\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n|Prüfung.auf              |R-Syntax                       |\n|:------------------------|:------------------------------|\n|Gleichheit               |x == Wert                      |\n|Ungleichheit             |x != Wert                      |\n|Größer als Wert          |x > Wert                       |\n|Größer oder gleich Wert  |x >= Wert                      |\n|Kleiner als Wert         |x < Wert                       |\n|Kleiner oder gleich Wert |x <= Wert                      |\n|Logisches UND            |(x < Wert1) & (x > Wert2)      |\n|Logisches ODER           |(x < Wert1) &#124; (x > Wert2) |\n\n</div>\n:::\n:::\n\n\n\n\n## Praxisbezug\n\n\n>   🧑‍🎓Wird R in der Praxis wirklich genutzt? \nOder ist R nur der Traum von (vielleicht verwirrten) Profs im Elfenbeinturm?\n\nSchauen wir uns dazu die Suchanfragen bei [stackoverflow.com](www.stackoverflow.com) an,\ndem größten FAQ-Forum für Software-Entwicklung.\nWir vergleichen Suchanfragen mit dem Tag `[r]` zu Suchanfragen mit dem Tag `[spss]`^[Durchgeführt am 2022-02-24, 17:21 CET]. Die Ergebnisse sind in Abbildung @fig-stackoverflow1 dargestellt.\n\n\n\n::: {.cell hash='R_cache/html/fig-stackoverflow1_a3e505b20212e42c6b77c1e6fee2ed4e'}\n::: {.cell-output-display}\n![Suchanfragen nach R bzw SPSS, Stand 2022-02-24](R_files/figure-html/fig-stackoverflow1-1.png){#fig-stackoverflow1 width=672}\n:::\n:::\n\n\n\nDas ist grob gerechnet ein Faktor von 200 (der Unterschied von R zu SPSS). \nDieses Ergebnis lässt darauf schließen, dass R in der Praxis viel mehr als Excel gebraucht wird.\n\n\n\n\n\n>   🧑‍🎓 Aber ist R wirklich ein Werkzeug, das mir im Job hilft? \n\nViele Firmen weltweit nutzen R zur Datenanalyse, wie [diese Liste](https://www.quora.com/Which-organizations-use-R?share=1) zeigt.\n\n>   👨‍🏫 R ist *der* Place-to-be für die Datenanalyse.\n\n\n>   🧑‍🎓 Aber ist Datenanalyse wirklich etwas, womit ich in Zukunft einen guten Job bekomme?\n\n\nBerufe mit Bezug zu Daten, Datenanalyse oder, allgemeiner, Künstlicher Intelligenz (artificial intelligence) gehören zu den am meisten wachsenden Berufen:\n\n\n>   Artificial intelligence (AI) continues to make a strong showing on our Emerging Jobs lists, which is no surprise. Many jobs that have risen up as a result of AI in ﬁelds like cybersecurity and data science and because it’s is so pervasive many roles may demand more knowledge of AI than you may think. For example, real estate and business development roles. [Quelle: LinkedIn](https://blog.linkedin.com/2019/december/10/the-jobs-of-tomorrow-linkedins-2020-emerging-jobs-report)\n\n\n## Aufgaben\n\n1. [Typ-Fehler-R-01](https://datenwerk.netlify.app//Typ-Fehler-R-01/Typ-Fehler-R-01.html)\n1. [Typ-Fehler-R-02](https://datenwerk.netlify.app//Typ-Fehler-R-02/Typ-Fehler-R-02.html)\n1. [Typ-Fehler-R-03](https://datenwerk.netlify.app//Typ-Fehler-R-03/Typ-Fehler-R-03.html)\n1. [Typ-Fehler-R-04](https://datenwerk.netlify.app//Typ-Fehler-R-04/Typ-Fehler-R-04.html)\n1. [Typ-Fehler-R-06a](https://datenwerk.netlify.app//Typ-Fehler-R-06a/Typ-Fehler-R-06a.html)\n1. [Typ-Fehler-R-07](https://datenwerk.netlify.app//Typ-Fehler-R-07/Typ-Fehler-R-07.html)\n\n## Vertiefung\n\n\nSie können bei [LinkedIn](https://www.linkedin.com/help/linkedin/answer/a510481) ein Zertifikat bekommen, das Ihre R-Kenntnisse dokumentiert.\nPraktischerweise wird das Zertifikat gleich Ihrem Profil zugeordnet.\n\nSuchen Sie ein schönes Meme zum Thema Statistik, Datenanalyse und Data Science. [Hier](https://data-se.netlify.app/2021/02/23/data-science-memes/) ist ein Startpunkt.\n\nDas Kombinieren von Funktionen kann kompliziert werden:\n\n\n::: {.cell hash='R_cache/html/unnamed-chunk-30_3214644093461cdd8c3de165701bca4a'}\n\n```{.r .cell-code}\nx <- c(1, 2, 3)\nsum(abs(mean(x)-x)) \n## [1] 2\n```\n:::\n\n\nDie Funktion `abs(x)` gibt den (Absolut-)Betrag von `x` zurück (entfernt das Vorzeichen, mit anderen Worten).\n\n\n\n\n\n## Literaturhinweise\n\n\"Warum R? Warum, R?\" heißt ein Kapitel in @sauer_moderne_2019, das einiges zum Pro und Contra von R ausführt.\nIn Kapitel 3 in der gleichen Quelle finden sich viele Hinweise, wie man R startet;\nIn Kapitel 4 werden Grundlagen von \"Errisch\" erläutert;\nKapitel 5 führt in Datenstrukturen von R ein (schon etwas anspruchsvoller).\nAlternativ bietet [Kapitel 1](https://moderndive.com/1-getting-started.html) von @ismay_statistical_2020 einen guten Überblick.\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}