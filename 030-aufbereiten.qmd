# Daten umformen

<style>
q {
  quotes: '‚Äû' '‚Äú';
}
</style>


```{r}
#| echo: false
#| message: false
library(ggpubr)
library(png)
library(grid)
library(patchwork)
library(gt)
```


```{r}
#| echo: false

source("_common.R")
```



## Lernsteuerung



### Standort im Lernpfad

Abb. @fig-ueberblick zeigt den Standort dieses Kapitels im Lernpfad und gibt damit einen √úberblick √ºber das Thema dieses Kapitels im Kontext aller Kapitel.



```{r}
#| echo: false
ggplot2::theme_set(theme_minimal())
```


### Lernziele


- Sie k√∂nnen folgende Verben des Datenjudo anwenden: `arrange`, `filter`,  `select`, `summarise`, `group_by`, `mutate`.
- Sie k√∂nnen R-Befehle mit der "Pfeife" verketten.


### Ben√∂tigte R-Pakete

```{r}
#| message: false
library(tidyverse)
library(easystats)
```




### Ben√∂tigte Daten

::: {.content-visible when-format="html"}

```{r import-mariokart}
mariokart <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv")
```
:::


::: {.content-visible when-format="pdf"}


```{r import-mariokart}
mariokart <- read.csv(paste0(
  "https://vincentarelbundock.github.io/Rdatasets/",
  "csv/openintro/mariokart.csv"))
```

:::

:::{#exr-los}
Importieren Sie den Datensatz `mariokart`. 
Probieren Sie alle vorgestellten Verben des Datenjudos aus,
zun√§chst in dem Sie einfach den R-Code kopieren und selber ausf√ºhren.$\square$
:::


### R-Code zum Copy-Pasten

Sie finden den R-Code f√ºr jedes Kapitel [hier](https://github.com/sebastiansauer/statistik1/tree/main/R-code-for-all-chapters). $\square$





### Frag den Bot


>   üë®‚Äçüè´ Erkl√§re einem F√ºnfj√§hrigen, warum Statistik n√ºtzlich ist.

>   ü§ñ Okay, h√∂r zu. Stell dir vor, du hast viele Spielzeugautos und du willst herausfinden, welches Auto am meisten bespielt wird. Du kannst jeden Tag z√§hlen, wie oft du jedes Auto benutzt hast. Aber das w√§re sehr m√ºhsam und k√∂nnte schnell durcheinander gebracht werden. Stattdessen kannst du mit Statistik eine einfachere Methode finden. Du kannst zum Beispiel eine Liste machen und jedes Auto mit einer bestimmten Farbe markieren. Dann kannst du jeden Tag einfach z√§hlen, wie oft du jede Farbe verwendet hast. Am Ende kannst du herausfinden, welches Auto am meisten bespielt wurde, indem du siehst, welche Farbe am meisten verwendet wurde. Das ist ein Beispiel daf√ºr, wie Statistik uns dabei helfen kann, Muster in gro√üen Datens√§tzen zu finden und Entscheidungen zu treffen, ohne alles einzeln zu z√§hlen.

Quelle: ChatGTP 3.5, 2023-02-09


### Zum Einstieg

Vielleicht fordert Sie die Lehrkraft zu einem Einstiegsquiz auf, etwas mittels der Plattform [antworte.jetzt](https://antworte.jetzt/).^[https://antworte.jetzt/] Alternativ √ºberlegen Sie sich selber 10 Quiz-Aufgaben zum Stoff des letzten Kapitels.



## Datenjudo

:::{#def-datenjudo}
### Datenjudo
Mit *Datenjudo* meint man den Prozess der Aufbereitens, Umformens oder Zusammenfassen von Daten, sowohl f√ºr einzelne Beobachtungen (Zeilen einer Datentabelle) oder Variablen (Spalten einer Datentabelle) oder einer ganzen Datentabelle. $\square$
:::

### Die Wahrheit √ºber Data Science

Denkt man an Data Science, stellt man sich coole Leute vor (in San Francisco oder Berlin), die an abgefahrenen Berechnungen mit hoch komplexen statistischen Modellen f√ºr gigantische Datenmengen basteln.
Tats√§chlich besteht ein gro√üer Teil der Arbeit aus dem Aufbereiten von Daten.


:::{.exm-datenjudo1}

### Praxisbezug: Aus dem Alltag des Data Scientisten

Laut dem [Harvard Business Review](https://hbr.org/2018/08/what-data-scientists-really-do-according-to-35-data-scientists) allerdings,
verbringen diese Leute "80%" ihrer Zeit mit dem *Aufbereiten* von Daten [@bowne-anderson_what_2018].^[<https://hbr.org/2018/08/what-data-scientists-really-do-according-to-35-data-scientists>]
Ja: mit uncoolen T√§tigkeiten wie Tippfehler aus Datens√§tzen entfernen oder die Daten √ºberhaupt nutzbar und verst√§ndlich zu machen.

Das zeigt zumindest, dass das Aufbereiten von Daten a) wichtig ist und b) dass man allein damit schon weit kommen kann. 
Eine gute Nachricht ist (vielleicht),
dass das Aufbereiten von Daten keine aufw√§ndige Mathematik verlangt,
stattdessen muss man ein paar Handgriffe und Kniffe kennen.
Daher passt der Begriff *Datenjudo* vielleicht ganz gut. 
K√ºmmern wir uns also um das Aufbereiten bzw. Umformen von Daten, um das Datenjudo. üî¢ü§π $\square$

:::


:::{#exm-datenjudo}

Beispiele f√ºr typische T√§tigkeiten des Datenjudos sind:

- Zeilen *filtern* (z. B. nur Studentis des Studiengangs X)
- Zeilen *sortieren* (z. B. Studenten mit guten Noten in den oberen Zeilen)
- Spalten *w√§hlen* (z. B. 100 weitere Produkte ausblenden) 
- Spalten in eine Zahl *zusammenfassen* (z. B. Notenschnitt der 1. Klausur)
- Tabelle *gruppieren* (z. B. Analyse getrennt nach Standorten)
- Werte aus einer Spalte *ver√§ndern* oder *neue Spalte* bilden (z. B. Punkte in Prozent-Richtige umrechnen).
- ... $\square$

:::


### Mach's einfach

Es gibt einen (einfachen) Trick, wie man umfangreiche Datenaufbereitung elegant geregelt kriegt, 
klingt fast zu sch√∂n, um wahr zu sein (s. @fig-that-would-be-great).

![Mach's einfach. Made at imgflip.com, Meme Generator](img/thatwouldbegreat.jpg){#fig-that-would-be-great width="50%"}

Der Trick besteht darin, komplexe Operationen in mehrere einfache Teilschritte zu zergliedern^[Genau darin besteht das Wesen einer Analyse: die Zerlegung eines Objekts in seine Bestandteile.].
Man k√∂nnte vom "Lego-Prinzip" sprechen, s. @fig-lego.
Im linken Teil von @fig-lego sieht man ein (recht) komplexes Gebilde.
Zerlegt man es aber in seine Einzelteile, so sind es deutlich einfachere geometrische Objekte wie Dreiecke oder Quadrate (rechter Teil des Diagramms).

![Das Lego-Prinzip](img/Bausteine_dplyr_crop){#fig-lego width="75%"}

Damit Sie es selber einfach machen k√∂nnen, m√ºssen Sie selber Hand anlegen.
Importieren Sie daher den Datensatz `mariokart`, z.B. so:


```{r}
mariokart <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv")

glimpse(mariokart)
```


```{r}
#| echo: false
mariokart <- as_tibble(mariokart)
```


:::{#exm-datenjudo}

Sie arbeiten immer noch bei dem gro√üen Online-Auktionshaus.
Mittlerweile haben Sie sich den Ruf des "Datenguru" erworben.
Vielleicht weil Sie behauptet haben, Data Science sei zu 80% Datenjudo,
das hat irgendwie Eindruck geschindet...
Naja, jedenfalls m√ºssen Sie jetzt mal zeigen, dass Sie nicht nur schlaue Spr√ºche draufhaben, sondern auch die Daten ordentlich abb√ºrsten k√∂nnen.
Sie analysieren daf√ºr im Folgenden den Datensatz `mariokart`. Na, dann los.$\square$
:::


## Die Verben des Datenjudos

Im R-Paket `{dplyr}`, das wiederum Teil des R-Pakets `{tidyverse}` ist,
gibt es eine Reihe von R-Befehlen,
die das Datenjudo in eine Handvoll einfacher Verben runterbrechen.^[Falls Sie das R-Paket `{tidyverse}` noch nicht installiert haben sollten, w√§re jetzt ein guter Zeitpunkt daf√ºr.]
Die wichtigsten Verben des Datenjudos schauen wir uns im Folgenden an.


Wir betrachten dazu im Folgenden einen einfachen (Spielzeug-)Datensatz,
an dem wir zun√§chst die Verben des Datenjudos vorstellen, s. @tbl-datenjudo.

```{r d-base}
#| echo: false
d <- 
tibble(id = c(1, 2, 3),
       name = c("Anni", "Berti", "Charli"),
       gruppe = c("A", "A", "B"),
       note = c(2.7, 2.7, 1.7))

ra <- png::readPNG("img/rightarrow.png", native = TRUE)

p_d1 <- ggtexttable(d, rows=NULL)
p_ra <- ggplot() + inset_element(ra, 0, 0, 1, 1)
```

```{r}
#| echo: false
#| tbl-cap: "Ein einfacher Datensatz von schlichtem Gem√ºt"
#| label: tbl-datenjudo
d |> gt()
```


:::{.callout-important}
Die Verben des Datenjudos wohnen im Paket `{dyplr}`,
welches gestartet wird, wenn Sie `library(tidyverse)` eingeben.
Falls Sie vergessen , das Paket `{tidyverse}` zu starten, dann funktionieren diese Befehle nicht.$\square$
:::

:::{.callout-note}
Zur Erinnerung: In RStudio k√∂nnen Sie per Klick auf das kleine Tabellen-Icon im Bereich *Environment* die Tabellenansicht einer Tabelle √∂ffnen, s. @sec-viewtab. $\square$
:::


### Tabelle sortieren: `arrange`

*Sortieren* der Zeilen ist eine einfache, aber h√§ufige T√§tigkeit des Datenjudos, s. @fig-arrange.

```{r plot-arrange}
#| echo: false
#| label: fig-arrange
#| fig-asp: .5
#| fig-cap: "Sinnbild f√ºr das Sortieren einer Tabelle mit `arrange()`"
d_arranged <-
  d %>% 
  arrange(note)

p_d_arranged <- ggtexttable(d_arranged, rows=NULL) 

p_d_arranged <-
  p_d_arranged %>% 
  table_cell_bg(column = 4, fill = "red", row = 2:tab_nrow(p_d_arranged))

p_text <- grid::textGrob("arrange()")

design <- 
  "
A#D
ABD
ACD
A#D
"

p_arrange <- wrap_plots(A = p_d1, 
                        B = p_text , 
                        C = p_ra, 
                        D = p_d_arranged, 
           widths = c(4,1,4),
           design = design) 
p_arrange +
  theme(plot.margin = margin(t = 5, r = 5, b = 5, l = 5, unit = "pt")) # Adjust top, right, bottom, and left margins


```


:::{#exm-arrange1}

### Was sind die h√∂chsten Preise?

Sie wollen mal locker anfangen. Daher stellen Sie sich folgende Frage: Was sind denn eigentlich die h√∂chsten Preise, f√ºr die das Spiel *Mariokart* √ºber den Online-Ladentisch geht?
Die Spalte des Verkaufspreis hei√üt offenbar `total_pr` (s. Tabelle `mariokart`).
In Excel kann die Spalte, nach der man die Tabelle sortieren m√∂chte,
einfach anklicken. Ob das in R auch so einfach geht?


```{r}
arrange(mariokart, total_pr)
```

√úbersetzen wir die R-Syntax ins Deutsche:

```
Hey R,
arrangiere (sortiere) `mariokart` nach der Spalte `total_pr`
```

Gar nicht so schwer.$\square$
:::



√úbrigens wird in `arrange()` per Voreinstellung aufsteigend sortiert.
Setzt man ein Minus vor der zu sortierenden Spalte,
wird umgekehrt, also *absteigend* sortiert:

```{r}
#| eval: false
mario_sortiert <- arrange(mariokart, -total_pr)
```


:::{#exr-arrange2}
Sortieren Sie die Mariokart-Daten absteigend nach der Anzahl der beigelegten Lenkr√§der.$\square$
:::

### Zeilen filtern: `filter`

#### Nur bestimmte Zeilen behalten

Zeilen *filtern* bedeutet, dass man nur *bestimmte* *Zeilen* (Beobachtungen) *behalten* m√∂chte, die restlichen Zeilen brauchen wir nicht, weg mit ihnen.
Wir haben also ein Filterkriterium im Kopf,
anhand dessen wir die Tabelle filern, s. @fig-filter.


```{r plot-filter}
#| echo: false
#| label: fig-filter
#| fig-cap: "Sinnbild f√ºr das Filtern einer Tabelle mit `filter()`"
d_filter <-
  d %>% 
  filter(note > 2)


p_d1 <- ggtexttable(d, rows=NULL)
p_ra <- ggplot() + inset_element(ra, 0, 0, 1, 1)
p_d_filter <- ggtexttable(d_filter, rows=NULL) 

p_d_filter <- 
  p_d_filter %>% 
  table_cell_bg(column = 1:4, fill = "red", row = 2:tab_nrow(p_d_filter))

p_text_filter <- grid::textGrob("filter()")

design <- 
  "
A#D
ABD
ACD
A#D
"

p_filter <- wrap_plots(A= p_d1, 
                       B = p_text_filter , 
                       C = p_ra, 
                       D = p_d_filter, 
                       widths = c(4,1,4),
                       design = design) 
p_filter
```


:::{#exm-filter}

### Ob ein Foto f√ºr den Verkaufspreis n√ºtzlich ist?

Als n√§chstes kommt Ihnen die Idee, 
mal zu schauen, ob Auktionen mit Photo der Ware einen h√∂heren Verkaufspreis erzielen
als Auktionen ohne Photo.

```{r}
mariokart_neu <- filter(mariokart, stock_photo == "yes")
mariokart_neu
```

Sie filtern also die Tabelle so,
dass *nur* diese Auktionen im Datensatz verbleiben,
welche ein Photo haben,
mit anderen Worten, Auktionen (Beobachtungen) bei denen gilt: `stock_photo == TRUE`.$\square$
:::


#### Komplexeres Filtern

Angestachelt von Ihren Erfolgen m√∂chten Sie jetzt komplexere Hypothesen pr√ºfen:
Ob wohl Auktionen von *neuen* Spielen und zwar *mit* Photo einen h√∂heren Preis erzielen als die √ºbrigen Auktionen?

Anders gesagt haben Sie zwei Filterkriterien im Blick: Neuheit `cond` und Photo `stock_photo`. Nur diejenigen Auktionen, die *sowohl* Neuheit *als auch* Photo erf√ºllen, m√∂chten Sie n√§her untersuchen (Filtern mit dem logischen UND):

```{r}
mario_filter1 <- filter(mariokart, stock_photo == "yes" & cond == "new")
mario_filter1
```



Hm. Was ist mit den Auktionen, die *entweder* √ºber ein Photo verf√ºgen *oder auch* neu sind, oder beides (Filtern mit dem logischen ODER)?

```{r}
mario_filter2 <- filter(mariokart, stock_photo == "yes" | cond == "new")
mario_filter2
```

üí°Zur Erinnerung: Logische Operatoren sind in @sec-logic erl√§utert.


Hier k√∂nnte man noch viele interessante Hypothesen pr√ºfen, denken Sie sich und tun das auch ... 



:::{#exr-filter2}
Filtern Sie die Spiele mit nur einem Lenkrad und ohne Versandkosten.$\square$
:::



:::{#exr-filter3}
Filtern Sie die Spiele mit nur einem Lenkrad, die einen √ºberdurchschnittlichen Verkaufspreis erzielen. 
Tipp: Nutzen Sie die Funktion `describe_distribution(name_der_tabelle)`, um den Mittelwert einer Variable des Datensatzes zu erfahren (diese Funktion wohnt im R-Paket `easystats`). $\square$
:::


### Spalten ausw√§hlen mit `select`

Eine Tabelle mit vielen Spalten kann schnell un√ºbersichtlich werden.
Da lohnt es sich, eine alte goldene Regel zu beachten: Mache die Dinge so einfach wie m√∂glich, aber nicht einfacher.
W√§hlen wir also *nur* die Spalten aus, die uns interessieren und entfernen wir die restlichen, s. @fig-select.

```{r select}
#| echo: false
#| label: fig-select
#| fig-asp: 0.5
#| fig-cap: "Sinnbild f√ºr das Ausw√§hlen von Spalten mit `select()`"
d_select <-
  d %>% 
  select(id, note)

p_d1 <- ggtexttable(d, rows=NULL)
p_ra <- ggplot() + inset_element(ra, 0, 0, 1, 1)
p_d_select <- ggtexttable(d_select, rows=NULL) 

p_d_select2 <- 
  p_d1 %>% 
  table_cell_bg(column = 2, fill = "red", row = 2:tab_nrow(p_d_select))

p_text_select <- grid::textGrob("select()")

design <- 
  "
A#D
ABD
ACD
A#D
"

p_select <- wrap_plots(A= p_d_select2, 
                       B = p_text_select, 
                       C = p_ra, 
                       D = p_d_select, 
                       widths = c(4,1,4),
                       design = design) 
p_select
```

:::{#exm-select}

### Fokus auf nur zwei Spalten

Ob wohl gebrauchte Spiele deutlich geringere Preise erzielen im Vergleich zu neuwertigen Spielen?
Sie entschlie√üen sich, mal ein St√ºndchen auf die relevanten Daten zu starren.

```{r}
#| eval: false
mario_select1 <- select(mariokart, cond, total_pr)
mario_select1
```




Aha (?)$\square$
:::

Der Befehl `select` erwartet als Input eine Tabelle und gibt (als Output) eine Tabelle zur√ºck - genau wie die meisten anderen Befehle des Datenjudos.
Auch wenn Sie nur eine Spalte ausw√§hlen, bleibt es eine Tabelle,
eben eine Tabelle mit nur einer Spalte.

`select` erlaubt Komfort; Sie k√∂nnen Spalten auf mehrere Arten ausw√§hlen,
z.B.

```{r}
#| eval: false
select(mariokart, 1, 2)  # Spalte 1 und 2
select(mariokart, 2:5)  #  Spalten 2 *bis* 5 
select(mariokart, -1)  # Alle Spalte *aber nicht* Spalte 1
```


:::{#exr-select}
W√§hlen Sie die Spalten `total_pr`, `cond` sowie die zweite Spalte der Tabelle `mariokart` aus!^[`select(mariokart, total_pr, cond, 2)`] $\square$
:::




Vertiefte Informationen zum Ausw√§hlen von Spalten mit `select` findet sich [hier](https://tidyr.tidyverse.org/reference/tidyr_tidy_select.html).^[<https://tidyr.tidyverse.org/reference/tidyr_tidy_select.html>]


### Spalten zu einer Zahl zusammenfassen mit `summarise`

So eine lange Spalte mit Zahlen -- mal ehrlich: wer blickt da schon durch?
Viel besser w√§re es doch, die Spalte `total_pr` zu einer Zahl zusammenzufassen, das ist doch viel handlicher.
Kurz entschlossen fassen Sie die Spalte `total_pr`, den Verkaufspreis, zum Mittelwert zusammen, s. @fig-summarise.

```{r plot-summarise}
#| echo: false
#| label: fig-summarise
#| fig-asp: 0.5
#| fig-cap: "Spalten zu einer einzelnen Zahl zusammenfassen mit `summaris()`"
d_summ <-
  d %>% 
  summarise(note_mw = round(mean(note), 1))


p_d1 <- ggtexttable(d, rows=NULL)
p_ra <- ggplot() + inset_element(ra, 0, 0, 1, 1)
p_d_summ <- ggtexttable(d_summ, rows=NULL) 

p_text_summ <- grid::textGrob("summarise()",
                              gp=grid::gpar(fontsize=8))

design <- 
  "
A#D
ABD
ACD
A#D
"

p_summ <- wrap_plots(A= p_d1, 
                       B = p_text_summ, 
                       C = p_ra, 
                       D = p_d_summ, 
                       widths = c(4,1,4),
                       design = design) 
p_summ
```

:::{#exm-summarise}

### Was ist der mittlere Verkaufspreis?

Mit `summarise`, s. @lst-summarise, k√∂nnen wir den mittleren Verkaufspreis der Mariokart-Spiele berechnen.



```{r}
#| lst-label: lst-summarise
#| lst-cap: "Die R-Funktion summarise fasst einen Vektor z u einer Zahl zusammen"
mariokart_mittelwert <- summarise(mariokart, preis_mw = mean(total_pr))
mariokart_mittelwert
```

Aha! Etwa 50‚Ç¨ erzielt so eine Auktion im Schnitt.$\square$

:::


√úbersetzen wir @lst-summarise vom Errischen ins Deutsche:

>   üßë‚Äçüéì  Hey R, fasse die Zeilen von `total_pr` aus `mariokart` zu einer Zahl zusammen, und zwar mit Hilfe des Mittelwerts. Die resultierende Tabelle nennen wir `mariokart_mittelwert, sehr kreativ. Und die resultierende Spalte, die einzige in `mariokart_mittelwert`, nennen wir `preis_mw`.



Ein bisschen abstrakter gesprochen, fasst `summarise` also eine *Spalte* zu einer (einzelnen) *Zahl* zusammen, s. @eq-desk-summ.^[Eine Alternative, um eine Spalte zu einer Zahl zusammenzufassen, bietet der "Dollar-Operator" (`$`):  `mean(mariokart$total_pr)`.
Der Dollar-Operator trennt hier die Tabelle von der Spalte: `tibble$spalte`.
Im Gegensatz zu den Verben des Tidyverse (die immer einer Tabelle zur√ºckliefern),
liefert der Dollar-Operator einen Vektor (Spalte) zur√ºck. (Diese wird von `mean` dann zu einer einzelnen Zahl zusammengefasst.)]
*Auf welche Art* zusammengefasst werden soll, z.B. anhand des Mittelwerts oder Maximalwerts, muss noch zus√§tzlich innerhalb von `summarise` angegeben werden.



$$\begin{array}{|c|} \hline \\ \hline \\  \\  \\ \\ \hline \end{array} \qquad \rightarrow  \qquad \begin{array}{|c|} \hline \\  \hline \end{array}$$ {#eq-desk-summ}



:::{#exr-summarise}
Identifizieren Sie den h√∂chsten Kaufpreis eines Mariokart-Spiels!^[`summarise(mariokart, hoechster_preis = max(total_pr))`] $\square$
:::






### Tabelle gruppieren

Es ist ja gut und sch√∂n, zu wissen, was so ein Spiel im Schnitt kostet.
Aber viel interessanter w√§re es doch, denken Sie sich,
zu wissen, ob die neuen Spiele im Schnitt mehr kosten als die alten?
Ob R Ihnen so etwas ausrechnen kann?

>   ü§ñ Ich tue fast alles f√ºr dich. üß° 

Also gut, R, dann gruppiere die Tabelle, s. @fig-group.


```{r plot-group}
#| echo: false
#| label: fig-group
#| fig-cap: "Gruppieren von Datens√§tzen mit `group_by()`"
d_groupby <-
  d %>% 
  group_by(gruppe)

d_g1 <-
  d %>% 
  filter(gruppe == "A")

d_g2 <-
  d %>% 
  filter(gruppe == "B")


p_d_g1 <- ggtexttable(d_g1, rows=NULL) 
p_d_g2 <- ggtexttable(d_g2, rows=NULL)


p_d_g1 <- 
  p_d_g1 %>% 
  table_cell_bg(column = 3, fill = "blue", row = 2:tab_nrow(p_d_g1))

p_d_g2 <- 
  p_d_g2 %>% 
  table_cell_bg(column = 3, fill = "green", row = 2:tab_nrow(p_d_g2))

p_text_summ <- grid::textGrob("group_by(gruppe)",
                              gp=grid::gpar(fontsize=8))

design <- 
  "
A#D
ABD
ACE
A#E
"

p_group <- wrap_plots(A= p_d1, 
                       B = p_text_summ, 
                       C = p_ra, 
                       D = p_d_g1, 
                       E = p_d_g2,
                       widths = c(3,1,3),
                       design = design) 
p_group
```

Durch das Gruppieren wird die Tabelle in "Teiltabellen" - entsprechend der Gruppen - aufgeteilt.
Das sieht man der R-Tabelle aber nicht wirklich an.
Aber alle nachfolgenden Berechnungen werden *f√ºr jede Teiltabelle* einzeln ausgef√ºhrt.


:::{#exm-groupby}

### Mittlerer Preis pro Gruppe

Gruppieren alleine liefert Ihnen zwei (oder mehrere) Teiltabellen,
etwa neue Spiele (Gruppe 1, `new`) vs. gebrauchte Spiele (Gruppe 2, `used`).
Mit anderen Worten: Wir gruppieren anhand der Variable `cond`.

```{r}
mariokart_gruppiert <- group_by(mariokart, cond)
```

Wenn Sie die neue Tabelle betrachte, sehen Sie wenig Aufregendes, nur einen Hinweis, dass die Tabelle gruppiert ist.
Jetzt k√∂nnen Sie an jeder Teiltabelle Ihre weiteren Berechnungen vornehmen, etwa die Berechnung des mittleren Verkaufspreises.


```{r}
summarise(mariokart_gruppiert, preis_mw = mean(total_pr))
```

Langsam f√ºhlen Sie sich als Datenchecker ... ü•∑ ü¶π‚Äç‚ôÄ $\square$
:::


:::{#exr-groupby}
:::{.panel-tabset}
### Aufgabe
Berechnen Sie den mittleren und maximalen Verkaufspreis getrennt f√ºr Spiele mit und ohne Foto!

### L√∂sung
```{r}
mariokart_gruppiert_foto <- group_by(mariokart, stock_photo)
mariokart_verkaufspreis_foto <- summarise(mariokart_gruppiert_foto,
                                          total_pr_avg = mean(total_pr),
                                          total_pr_max = max(total_pr))

mariokart_verkaufspreis_foto
```

:::
:::


### Spalten ver√§ndern mit `mutate`

Immer mal wieder m√∂chte man *Spalten ver√§ndern*, bzw. deren Werte umrechnen, s. @fig-mutate.

```{r plot-mutate}
#| echo: false
#| label: fig-mutate
#| fig-asp: 0.5
#| fig-cap: "Spalten ver√§ndern/neu berechnen mit `mutate()`"
d_mutate <-
  d %>% 
  mutate(punkte = c(73, 72, 89))

p_d_mutate <- ggtexttable(d_mutate, rows=NULL) 

p_d_mutate <- 
  p_d_mutate %>% 
  table_cell_bg(column = 5, fill = "red", row = 2:tab_nrow(p_d_select))

p_text_mutate <- grid::textGrob("mutate()",
                              gp=grid::gpar(fontsize=7))

design <- 
  "
A#D
ABD
ACD
A#D
"

p_mutate <- wrap_plots(A= p_d1, 
                       B = p_text_mutate, 
                       C = p_ra, 
                       D = p_d_mutate, 
                       widths = c(3,1,4),
                       design = design) 
p_mutate
```

:::{#exm-mutate}

Der Hersteller des Computerspiels *Mariokart* kommt aus Japan; 
daher erscheint es Ihnen opportun f√ºr ein anstehendes Meeting mit dem Hersteller die Verkaufspreise von Dollar in japanische Yen umzurechnen.
Nach etwas Googeln finden Sie einen Umrechnungskurs von 1:133.

```{r}
mariokart2 <- mutate(mariokart, total_pr_yen = total_pr * 133)
mariokart2 <- select(mariokart2, total_pr_yen, total_pr)
mariokart2
```

Sicherlich werden Sie Ihre Gespr√§chspartner schwer beeindrucken.$\square$
:::


Mit  `mutate` berechnen Sie eine Spalte `x` (in einer Tabelle) neu.
Die Funktion, die Sie in `mutate` benennen wird f√ºr jede Zeile der Spalte `x` angewendet.

:::{#exm-mutate2}
### Beispiele f√ºr Funktionen f√ºr `mutate`
`mutate` eignet sich, z.B. um Spalten zu addieren, zu multiplizieren oder sonstwie zu transformieren (z.B. den Logarithmus anwenden oder den Mittelwert der Spalte von jeder Zeile abziehen). $\square$
:::


:::{#exr-mutate}
:::{.panel-tabset}
### Aufgabe
Rechnen Sie die Dauer der Auktionen von Tagen in Wochen um.

### L√∂sung
```{r}
mariokart_duration_wochen <- 
  mutate(mariokart, duration_week = duration / 7)

mariokart_duration_wochen <-
   select(mariokart_duration_wochen, duration, duration_week)
mariokart_duration_wochen
```
:::
:::



:::{#exr-mutate2}
:::{.panel-tabset}
### Aufgabe
Rechnen Sie wieder die Dauer der Auktionen von Tagen in Wochen um, aber runden Sie die Wochen auf ganze Wochen.

### L√∂sung

```{r}
mariokart_duration_wochen <- 
  mutate(mariokart, duration_week = duration / 7)

mariokart_duration_wochen_gerundet <-
  mutate(mariokart_duration_wochen, duration_week_gerundet = round(duration_week, digits = 0))

mariokart_duration_wochen_schmal <-
  select(mariokart_duration_wochen_gerundet, duration, duration_week, duration_week_gerundet)
mariokart_duration_wochen_schmal
```
:::
:::



>    üßü‚Äç‚ôÄÔ∏è Statistik, wann braucht man schon sowas!?

>    üë®‚Äçüè´ Eigentlich nur dann, wenn man die Fakten gut verstehen will, sonst nicht.



### Zeilen z√§hlen mit `count`


Arbeitet man mit nominalskalierten Daten, ist (fast) alles, was man tun kann,
das Zeilen z√§hlen.^[Ja, das ist traurig.]

Man k√∂nnte z.B. fragen, wie viele neue und wie viele alte Spiele in der Tabelle (Dataframe) `mariokart` vorhanden sind.

:::{#exm-count}
Nach der letzten Pr√§sentation Ihrer Analyse hat Ihre Chefin gest√∂hnt: 
"Oh nein, alles so kompliziert. Statistik! Himmel hilf! 
Kann man das nicht einfacher machen?"
Anstelle von irgendwelchen komplizierten Berechnungen (Mittelwert?) m√∂chten Sie ihr beim n√§chsten Treffen nur zeigen, wie viele Computerspiele neu und wie viele gebraucht sind (in Ihrem Datensatz).
Schlichte H√§ufigkeiten also. Hoffentlich ist Ihre Chefin nicht wieder √ºberfordert...

```{r}
mariocart_counted <- count(mariokart, cond)
mariocart_counted
```


Aha! Es gibt mehr gebrauchte als neue Spiele.$\square$
:::

Jetzt k√∂nnte man noch den *Anteil* (engl. *proportion*) erg√§nzen:
Welcher *Anteil* (der 143 Spiele in `mariokart`) ist neu, welcher gebraucht?

```{r}
mutate(mariocart_counted, Anteil = n / sum(n))
```



:::{#exr-count}
Z√§hlen Sie Sie, wie viele Auktionen ein Foto enthalten.^[`count(mariokart, stock_photo)`] $\square$
:::

:::{#exr-count2}
Z√§hlen Sie Sie, wie viele Auktionen ein Foto enthalten -- innerhalb der gebrauchten Spiele und innerhalb der neuen Spiele. Anders gesagt: Teilen Sie den Datensatz sowohl nach Zustand als auch nach Foto auf und z√§hlen Sie jeweils, wie viele Spiele/Auktionen in die jeweilige Gruppe geh√∂ren.^[`count(mariokart, stock_photo, cond)`] $\square$
:::




### Fazit: Verben am Flie√üband

die Befehle ("Verben") des Tidyverse sind jeweils f√ºr einzelne, typische Aufgaben des Datenaufbereitens ("Datenjudo") zust√§ndig.

Typischerweise erwarten diese Befehle eine Tabelle (‚ñ•) als Input und liefern eine Tabelle aus Output zur√ºck, s. @fig-tbl-in-out.


```{mermaid}
%%| label: fig-tbl-in-out
%%| fig-cap: Tidyverse-Befehle erwarten normalerweise eine Tabelle (tibble) als Input und geben auch eine Tabelle zur√ºck als Output
flowchart LR
  A["‚ñ•"] --> B[tidyverse-Befehl] --> C["‚ñ•"] 
```


## Die Pfeife {#sec-pipe}

üö¨ üëà Das ist keine Pfeife, wie Ren√© Magritte 1929 in seinem [ber√ºhmten Bild](https://en.wikipedia.org/wiki/File:MagrittePipe.jpg) schrieb, s. @fig-pfeifen [@m7_savinellis_2004-1].^[Vgl. <https://en.wikipedia.org/wiki/The_Treachery_of_Images>]

:::::{#fig-pfeifen}

:::: {.columns}

::: {.column width="30%"}
![Das ist keine Pfeife. Sondern ein Bild einer Pfeife.](img/800px-Pipa_savinelli.jpg){#fig-pfeife width="50%"}

:::




::: {.column width="10%"}
<!-- Empty col -->

:::


::: {.column width="30%"}
:::{.xlarge}
%>%   
:::
:::

::: {.column width="30%"}
:::{.xlarge}
|>
:::
:::

::::

So sieht die Pfeife in R aus^[Jaja, das ist keine Pfeife, sondern ein Symbol einer Pfeife...]. Links: Ein Bild einer Pfeife. Mitte und Rechts: Die zwei R-Symbole f√ºr eine "Pfeife" (pipe).

:::::


### Russische Puppen

Computerbefehle, und im Speziellen R-Befehle kann man "aufeinander" -- oder vielmehr: ineinander -- stapeln, so √§hnlich wie eine russische Puppe (vgl. @sec-first-fun).
Schauen wir uns das in einem Beispiel an.
Dazu definieren wir zuerst einen Vektor `x` aus drei Zahlen:

```{r}
x <- c(1, 2, 3)
```

Und dann kommt unser verschachtelter Befehl:

```{r}
sum(x - mean(x))
```

Wie schon erw√§hnt, arbeitet R so einen "verschachtelten" Befehl *von innen nach au√üen* ab:


Start: `sum(x - mean(x))`

      ‚¨áÔ∏è 

Schritt 1: `sum(x - 2)`

      ‚¨áÔ∏è 

Schritt 2: `sum(-1, 0, 1)`

      ‚¨áÔ∏è 

Schritt 3: `0`. Fertig. Puh. Kompliziert.


Soweit kann man noch einigerma√üen folgen. 
Aber das Verschachteln kann man noch extremer machen,
dann wird's wild.
Schauen Sie sich mal folgende (Pseudo-)Syntax an:^[Ein beliebter Fehler ist es √ºbrigens, nicht die richtige Zahl an schlie√üenden Klammern hinzuschreiben, z.B. `fasse_zusammen(gruppiere(w√§hle_spalten(filter_zeilen(meine_daten))))` FALSCHE ZAHL AN KLAMMERN.]


```{#lst-schachtel .r lst-cap="Eine wild verschachtelte Sequenz von R-Befehlen"}
fasse_zusammen(gruppiere(w√§hle_spalten(filter_zeilen(meine_daten))))
```


ü§Ø 

### Die Pfeife zur Rettung

@lst-schachtel ist schon harter Tobak, was f√ºr echte Fans.
W√§re es nicht einfacher, man k√∂nnte @lst-schachtel wie folgt schreiben:


```
Nimm "meine_daten" *und dann*
  filter gew√ºnschte Zeilen *und dann*
  w√§hle gew√ºnschte Spalten *und dann*
  teile in Subgruppen *und dann*
  fasse sie zusammen.
```

:::{#def-pipe}
### Pfeife
"Und dann" hei√üt auf Errisch ` %>% ` oder ` |> `.
Man nennt diesen Befehl "Pfeife" (engl. *pipe*). $\square$
:::

:::{.callout-note}
Der Befehl ` %>% ` *verkn√ºpft* Befehle.
Der Shortcut f√ºr diesen Befehl ist Strg-Shift-M.
Die Pfeife `%>%` "wohnt" im Paket `{tidyverse}`.^[Genauer gesagt im Paket `{magrittr}`,
welches aber under the hood von `{tidyverse}` geladen wird. 
Also nichts, um dass Sie sich k√ºmmern m√ºssten.]
:::

Mittlerweile^[Seit R 4.1] ist auch im Standard-R eine Pfeife eingebaut.
die sieht so aus: `|>`.
Die eingebaute Pfeife funktioniert praktisch gleich zur anderen Pfeife ` %>% `,
hat aber den Vorteil, dass Sie nicht `{tidyverse}` starten m√ºssen.
Da wir `{tidyverse}` aber sowieso praktisch immer starten werden, 
bringt es uns keinen Vorteil, die neuere Pfeife des Standard-R `|>` zu verwenden.^[Aber auch keinen Nachteil. Unter *Tools > Global Options...* k√∂nnen Sie einstellen, dass der Shortcut Strg-Shift-M die eingebaute Pfeife verwendet.] 

::::{.columns}

:::{.column width="50%"}

```{mermaid}
%%| fig-cap: Illustration f√ºr eine Pfeifensequenz, es geht vorw√§rts wie am Flie√üband.
%%| label: fig-pfeife
%%| out-width: "100%"
flowchart TD
  A["meine Daten üó≥"] --filter_zeilen-->B["‚ñ•"] 
  B --w√§hle_spalten--> C["‚ñ•"]
  C --gruppiere--> D["‚ñ•"]
  D --fasse_zusammen--> E["‚ñ• Fertig. ü§©"]

```

:::

:::{.column width="50%"}


Und jetzt kommt's: So eine Art von Befehls-Verkettung gibt es in R.
Schauen Sie sich mal @lst-pfeife an:

```{#lst-pfeife .r lst-cap="Eine Pfeifen-Befehlssequenz (Pseudo-Syntax)"}
meine_daten %>%
  filter_gew√ºnschte_zeilen() %>%
  w√§hle_gew√ºnschte_spalten() %>%
  gruppiere() %>%
  fasse_zusammen() 
```


So eine Pfeifen-Befehlsequenz ist ein wie ein Flie√üband,
an dem es mehrere Arbeitsstationen gibt, s. @fig-pfeife. 
Unser Datensatz wird am Flie√üband von Station zu Station weitergereicht und
an jeder Stelle weiterverarbeitet.

:::
::::

<!-- TODO  -->
<!-- ## Praxisprobleme des Datenaufbereitens -->

<!-- ### Fehlende Werte  -->

<!-- ### Spalten umbenennen -->

<!-- ### Werte umkodieren -->



So k√∂nnte Ihre "Pfeifen-Sequenz" aussehen:

```{r}
# Hey R:
mariokart %>%   # nimm die Tabelle "mariokart" und dann...
  filter(total_pr < 100) %>%  # filter nur die g√ºnstigen Spiele und dann...
  select(cond, total_pr) %>%  # w√§hle die zwei Spalten und dann ...
  group_by(cond) %>%  # gruppiere die Tabelle nach Zustand des Spiels und dann ...
  summarise(total_pr_mean = mean(total_pr))  # fasse beide Gruppen nach dem mittleren Preis zusammen
```


:::{.callout-important}
Die Syntax `filter(mariokart, total_pr < 100)` und die Syntax `mariokart |> filter(total_pr < 100)` sind identisch.

Allgemeiner: `d |> f(x)` = `f(d, x)`.
:::


## Beispiele f√ºr Forschungsfragen

:::{#exr-fallbsps}
Bevor Sie die L√∂sungen der folgenden Fallbeispiele lesen, versuchen Sie die Aufgaben selber zu l√∂sen.
Ja, ich wei√ü, es ist hart, nicht gleich auf die L√∂sungen zu schauen! $\square$
:::


Sie arbeiten als ~~Diener~~ strategischer Assistent der Gesch√§ftsf√ºhrerin und sind f√ºr Faktenchecks und andere Daten-Aufgaben zust√§ndig. 
Heute sollen Sie zeigen, was Sie k√∂nnen (Schluck).


### Forschungsfrage 1

:::{.panel-tabset}

### Frage

>   Ô∏èüë© Ich w√ºrde von Ihnen  gerne wissen, was das teuerste Spiel ist, aber jeweils f√ºr neue und gebrauchte Spiele. Aber nur f√ºr Spiele, die mit Foto verkauft wurden!

### Antwort

```{r}
mariokart %>% 
  filter(stock_photo == "yes") %>% 
  group_by(cond) %>% 
  summarise(total_pr_max = max(total_pr))
```

Die Funktion `max` liefert den gr√∂√üten Wert eines Vektors zur√ºck:

```{r}
x <- c(1, 2, 10)
max(x)
```
:::


### Forschungsfrage 2

:::{.panel-tabset}

### Frage
>    Ô∏èüë©Ô∏è Ich w√ºrde gerne die mittlere Versandpauschale wissen, aber getrennt nach Anzahl der Lenkr√§der, die dem Spiel beigelegt sind. Und ich will nur Gruppen ber√ºcksichtigen, die aus mindestens 10 Spielen bestehen!

### Antwort

Wenn wir die Anzahl der Spiele z√§hlen in Abh√§ngigkeit der beigelegten Lenkr√§der (`wheels`), bekommen wir eine Tabelle mit zwei Spalten: `wheels` und `n`.
`n` z√§hlt, wie viele Spiele (Zeilen) in der jeweiligen Gruppe ("Teiltabelle") von `wheels` sind.

```{r}
mariokart %>%
  count(wheels)
```

Aus dieser Tabellet sehen wir, dass 3 oder 4 Lenkr√§der nur selten (2 bzw. 1 Mal) beigelegt wurden und wir solche Spiele herausfiltern sollten, bevor wir den Mittelwert der Versankosten ausrechnen:

```{r}
mariokart %>%
  filter(wheels < 3) %>% 
  group_by(wheels) %>% 
  summarise(mittlere_versandkosten = mean(ship_pr),
            anzahl_spiele = n())
```

Die Funktion `n()` gibt die Anzahl der Zeilen pro Teiltabelle zur√ºck.
:::


### Forschungsfrage 3


:::{.panel-tabset}

### Frage

>   Ô∏èüë©Ô∏è Ich w√ºrde gerne den Verkaufspreis in Yen wissen, nicht in Euro. Dann rechne mal den mittleren Verkaufspreis aus und ziehe 10% ab, die wir als Provision unseren Verk√§ufern zahlen m√ºssen.


### Antwort

```{r}
mariokart %>% 
  select(total_pr) %>% 
  mutate(total_pr_yen = total_pr * 133) %>% 
  summarise(preis_yen_mw = mean(total_pr_yen),
            preis_yen_mw_minus_10proz = preis_yen_mw - 0.1*preis_yen_mw)
```

Wie man sieht kann man in `summarise` auch mehr als eine Berechnung einstellen.
In diesem Fall haben wir zwei Berechnungen angestellt: Einmal den Mittelwert und einmal den Mittelwert minus 10% (des Mittelwerts).

:::


:::{#exr-diy}
### Do It Yourself
Denken Sie sich selber √§hnliche Forschungsfragen aus.
Stellen Sie diese einer vertrauensw√ºrdigen Kommilitonen bzw. einem vertrauensw√ºrdigen Kommilitonen. DIY!
Schauen Sie, ob Ihre Aufgabe richtig gel√∂st wird. $\square$
:::

## Praxisbezug


Die Covid19-Epidemie hatte weltweit massive Auswirkungen; auch psychologischer Art wie Vereinsamung, Angst oder Depression.
Eine Studie, die die psychologischen Auswirkungen von @mulukom_psychological_2020,
die [unter der Projekt-ID tsjnb bei der Open Science Foundation (OSF), <https://osf.io/tsjnb/>, angemeldet ist](https://osf.io/tsjnb/).
Die Daten wurden mit R ausgewertet. Beispielhaft ist unter <https://osf.io/4b9p2> die R-Syntax zu sehen, die die Autoren zur Datenaufbereitung verwendet haben. 
Einen guten Teil dieser Syntax kennen Sie aus diesem Kapitel.
Diese Studie ist, neben einigen vergleichbaren, ein sch√∂nes Beispiel, wie Forschung und Praxis ineinander  greifen k√∂nnen: Angewandte Forschung als Beitrag zur L√∂sung eines akuten Problems, der Corona-Pandemie.


## Wie man mit Statistik l√ºgt

Ein (leider) immer mal wieder zu beobachtender "Trick", um Daten zu frisieren ist,
nur die Daten zu berichten, die einem in den Kram passen.

:::{#exm-luege-filter}

```{r}
#| echo: false
pr_mean <- round(mean(mariokart$total_pr), 0)
```


Ei Analysti üßë‚Äç m√∂chte zeigen, dass der Verkaufspreis von Mariokart-Spielen "viel zu niedrig" ist. Es muss ein h√∂herer Wert rauskommen, findet dis Analysti. Der mittlere Verkaufspreis (im Datensatz `mariokart`) liegt bei 50 Euro. 


>   üßë‚Äç Kann man den Wert nicht ... "kreativ verbessern"? Ein paar Statistik-Tricks anwenden?

Um dieses Ziel zu erreichen, teilt dis Analysti den Datensatz in Gruppen nach Anzahl der dem Spiel beigelegten Lenkr√§der (`wheels`). Dann wird der Mittelwert pro Gruppe berechnet.

```{r}
mariokart_wheels <- 
mariokart %>% 
  group_by(wheels) %>% 
  summarise(pr_mean = mean(total_pr),
            count_n = n())  # n() gibt die Anzahl der Zeilen pro Gruppe an

mariokart_wheels
```

Schlie√ülich berechnet unser Analysti den *ungewichteten* Mittelwert √ºber diese 5 Gruppen:

```{r}
mariokart_wheels %>% 
  summarise(mean(pr_mean))
```

Und das Ergebnis lautet: 56 Euro! Das ist doch schon etwas "besser" als 50 Euro.

Nat√ºrlich ist es *falsch* und irref√ºhrend, hier einen ungewichteten Mittelwert zu berechnen.
Der gewichtete Mittelwert w√ºrde wiederum zum korrekten Ergebnis, 50 Euro, f√ºhren.$\square$
:::

## Fallstudien

### Die Pinguine

![Possierlich: Die Pinguine](img/penguins.png){#fig-penguins width="50%"}

:::{#exr-peng-start}
Machen Sie sich zun√§chst mit dem Pinguin-Datensatz vertraut. Fokussieren Sie sich auf die Zielvariable *Gewicht*.
$\square$
:::

::::: {.content-visible unless-format="pdf"}
Die folgende Datenapp erm√∂glicht Ihnen, die Verteilung des K√∂rpergewichts zu betrachten, wobei sie die Pinguin-Spezies filtern k√∂nnen sowie eine Mindestl√§nge des Schnabels verlangen k√∂nnen.

```{ojs}
//| panel: input
//| echo: false
viewof bill_length_min = Inputs.range(
  [32, 50], 
  {value: 35, step: 1, label: "Bill length (min):"}
)
viewof islands = Inputs.checkbox(
  ["Torgersen", "Biscoe", "Dream"], 
  { value: ["Torgersen", "Biscoe"], 
    label: "Islands:"
  }
)
```

::: {.panel-tabset}

### Plot

```{ojs}
//| echo: false
Plot.rectY(filtered, 
  Plot.binX(
    {y: "count"}, 
    {x: "body_mass_g", fill: "species", thresholds: 20}
  ))
  .plot({
    facet: {
      data: filtered,
      x: "sex",
      y: "species",
      marginRight: 80
    },
    marks: [
      Plot.frame(),
    ]
  }
)
```

### Data

```{ojs}
//| echo: false
Inputs.table(filtered)
```

:::

```{ojs}
//| echo: false
data = FileAttachment("daten/penguins.csv").csv({ typed: true })
```

```{ojs}
//| echo: false
filtered = data.filter(function(penguin) {
  return bill_length_min < penguin.bill_length_mm &&
         islands.includes(penguin.island);
})
```

:::::

Bearbeiten Sie die [Fallstudie zu Pinguinen](https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome) von Allison Horst.^[<https://allisonhorst.shinyapps.io/dplyr-learnr/#section-welcome>]
Sie k√∂nnen die Teile auslassen, die Themen beinhalten,
die *nicht* in diesem Kapitel vorgestellt wurden.


### Weitere Fallstudien


[Diese Fallstudie](https://sebastiansauer.github.io/Fallstudie_Flights/) hat die Analyse von Flugversp√§tungen zum Thema.




![Studie COVIDiSTTRESS](img/Covidistress1.jpg){width=30%}
<https://osf.io/z39us/>


>   The COVIDiSTRESS global survey is an international collaborative undertaking for data gathering on human experiences, behavior and attitudes during the COVID-19 pandemic. In particular, the survey focuses on psychological stress, compliance with behavioral guidelines to slow the spread of Coronavirus, and trust in governmental institutions and their preventive measures, but multiple further items and scales are included for descriptive statistics, further analysis and comparative mapping between participating countries. Round one data collection was concluded May 30. 2020. To gather comparable data swiftly from across the globe, when the Coronavirus started making a critical impact on societies and individuals, the collaboration and survey was constructed as an urgent collaborative process. Individual contributors and groups in the COVIDiSTRESS network (see below) conducted translations to each language and shared online links by their own best means in each country.



[Die Daten](https://osf.io/z39us/files/osfstorage) stehen unter <https://osf.io/z39us> zur freien Verf√ºgung. Sie k√∂nnen diese echten Daten eigenst√§ndig analysieren. [Diese Datei](https://osf.io/z39us/files/osfstorage/5f20b69732080501f5156b02) beinhaltet die finalen, aufbereiteten Daten. Achtung: Die Datei ist recht gro√ü, ca. 90 MB.




## Aufgaben

:::{.callout-tip}
### ChatGPT
Nutzen Sie einen Chat-Bot wie ChatGPT, um sich Hilfe f√ºr die R-Syntax geben zu lassen. $\square$
:::

Die Webseite [datenwerk.netlify.app](https://datenwerk.netlify.app) stellt eine Reihe von einschl√§gigen √úbungsaufgaben bereit. Sie k√∂nnen die Suchfunktion der Webseite nutzen, um die Aufgaben mit den folgenden Namen zu suchen:

1. [wrangle3](https://datenwerk.netlify.app/posts/wrangle3/wrangle3.html)
1. [wrangle4](https://datenwerk.netlify.app/posts/wrangle4/wrangle4.html)
1. [wrangle5](https://datenwerk.netlify.app/posts/wrangle5/wrangle5.html)
1. [wrangle7](https://datenwerk.netlify.app/posts/wrangle7/wrangle7.html) 
1. [wrangle9](https://datenwerk.netlify.app/posts/wrangle9/wrangle9.html) 
1. [wrangle10](https://datenwerk.netlify.app/posts/wrangle10/wrangle10.html)
1. [tidydata1](https://datenwerk.netlify.app/posts/tidydata1/tidydata1.html) 
1. [affairs-dplyr](https://datenwerk.netlify.app/posts/affairs-dplyr/affairs-dplyr.html) 
 

1. [dplyr-uebersetzen](https://datenwerk.netlify.app/posts/dplyr-uebersetzen/dplyr-uebersetzen.html) 
1. [haeufigkeit01](https://datenwerk.netlify.app/posts/haeufigkeit01/haeufigkeit01.html) 
1. [mariokart-mean1](https://datenwerk.netlify.app/posts/mariokart-mean1/mariokart-mean1.html)
1. [mariokart-mean2](https://datenwerk.netlify.app/posts/mariokart-mean2/mariokart-mean2.html) 
1. [mariokart-mean3](https://datenwerk.netlify.app/posts/mariokart-mean3/mariokart-mean3.html)
1. [mariokart-mean4](https://datenwerk.netlify.app/posts/mariokart-mean4/mariokart-mean4.html)
1. [mariokart-max1](https://datenwerk.netlify.app/posts/mariokart-max1/mariokart-max1.html) 
1. [mariokart-max2](https://datenwerk.netlify.app/posts/mariokart-max2/mariokart-max2.html)
1. [filter01](https://datenwerk.netlify.app/posts/filter01/filter01.html)
1. [affairs-dplyr](https://datenwerk.netlify.app/posts/affairs-dplyr/affairs-dplyr.html)
1. [summarise01](https://datenwerk.netlify.app/posts/summarise01/summarise01.html)
1. [summarise02](https://datenwerk.netlify.app/posts/summarise02/summarise02.html)
1. [mutate01](https://datenwerk.netlify.app/posts/mutate01/mutate01.html)
10. [wrangle3](https://datenwerk.netlify.app/posts/wrangle3/wrangle3)


## Vertiefung

### Tidydatatutor

Die Verben des Datenjudos werden beim ["Tidydatatutor"](https://tidydatatutor.com/) anschaulich illustriert.^[<(https://tidydatatutor.com>]




### Fortgeschrittenes R

:::{.callout-note}
In weiterf√ºhrendem Material werden Sie immer wieder auf Inhalte treffen,
die Sie noch nicht kennen, die etwa noch nicht im Unterricht behandelt wurden.
Seien Sie unbesorgt: In der Regel k√∂nnen Sie diese Inhalte einfach auslassen,
ohne den Anschluss zu verlieren. 
Einfach ignorieren. üòÑ
::: 


H√§ufig ist es n√ºtzlich, die Werte einer Variablen umzukodieren, z.B. "weiblich" in "w" oder in `0`. 
Eine gute M√∂glichkeit, dies in R umzusetzen, bietet der Befehl `case_when()`;
der Befehl wohnt im Tidyverse.
[Hier](https://www.statology.org/dplyr-case_when/) - und an vielen weiteren Stellen im Internet - finden Sie ein Tutorium.^[<https://www.statology.org/dplyr-case_when/>]. Im Datenwerk finden Sie dazu √úbungen, etwa [mutate03](https://datenwerk.netlify.app/posts/mutate03/mutate03.html)


### Hilfe?! Erbie! {#sec-erbie}


R will nicht, so wie Sie wollen? Sie haben das Gef√ºhl, R verweigert st√∂rrisch den Dienst, vermutlich rein aus Boshaftigkeit, rein um Sie zu √§rgern? 
Ausf√ºhrliches Googeln und ChatGPT befragen hat keine L√∂sung gebracht?
Kurz, Sie brauchen die Hilfe eines kundigen Menschens?^[<https://www.youtube.com/watch?v=2Q_ZzBGPdqE>]

[Hier](https://data-se.netlify.app/2022/01/31/erbie-einfache-reproduzierbare-beispiele-ihres-problems-mit-r-syntax/) finden Sie eine Anleitung, wie man seinen Hilfeschrei so formuliert (ruft), dass er nicht nur geh√∂rt, sondern auch verstanden wird und einen anderen Menschen veranlasst und erm√∂glicht Ihnen zu helfen.^[<https://data-se.netlify.app/2022/01/31/erbie-einfache-reproduzierbare-beispiele-ihres-problems-mit-r-syntax/>]

Also: Sie m√ºssen Ihr Problem nachvollziehbar aber pr√§gnant formulieren. 
Das nennt man auch ein *ERBie*, ein *einfaches, reproduzierbare Beispiel* Ihres Problems mit (R-)Syntax:

- einfach: die einfachste Syntax, die Ihr Problem bzw. die Fehlermeldung produziert. Es bietet sich an, einen einfachen, allgemein bekannten Datensatz zu verwenden, etwa `mtcars`
- reproduzierbar: Code (z.B. als Textdatei oder in einem Post), der die Fehlermeldung entstehen l√§sst


:::{#exm-erbie}
### Beispiel f√ºr ein Erbie

*Problem:* Ich verstehe nicht, warum eine Fehlermeldung kommt

*Ziel:* Ich m√∂chte die Automatikautos filtern (am = 0)

*Was ich schon versucht habe:* Ich habe folgende Posts gelesen ..., aber ohne Erfolg

*Erbie*:

```{r}
#| error: true
data(mtcars)
library(dplyr)  # nicht "tidyverse", denn "dplyr" reicht

mtcars %>% 
  filter(am = 0)  # den k√ºrzesten Code, der Ihren Fehler entstehen l√§sst!

sessionInfo()  # gibt Infos zur R-Version etc. aus
```


Mit dem Paket `{reprex}` kann man sich R-Syntax sch√∂n formuliert ausgeben lassen.
Das ist perfekt, um den Code dann in einem Forum (oder Mail) einzustellen.
Daf√ºr m√ºssen Sie nur den Code ausw√§hlen, `Strg-C` dr√ºcken und dann `reprex::reprex` ausf√ºhren.
Mit `Strg-V` k√∂nnen Sie die sch√∂n formatierte Syntax (sowie die Ausgabe, auch sch√∂n formatiert) dann irgendwohin pasten.
:::

::: {.content-visible unless-format="pdf"}
<center>
<iframe src="https://gifer.com/embed/G4h" width=480 height=275.556 frameBorder="0" allowFullScreen></iframe><p><a href="https://gifer.com">via GIFER</a></p>
</center>
:::

:::{.callout-tip}
Posten Sie Ihr Erbie bei <https://gist.github.com/> als "public gist". [Hier](https://gist.github.com/sebastiansauer/0649a0453b5cc7c6a1d16ac760667215) ist ein Beispiel.$\square$
:::



### Zertifikate und Online-Kurse

Sie k√∂nnen zu den Inhalten dieses Kapitels Zertifikate erwerben (teilweise kostenlos), indem Sie einen Online-Kurs absolvieren, bei z.B. folgenden Anbietern^[Das ist keine Werbung f√ºr spezifische Anbieter und kein umfassender √úberblick und keine Kaufempfehlung.]:

- [LinkedIn: R Courses](https://www.linkedin.com/learning/search?keywords=R)
- [Google/Coursera: Data Analysis with R Programming](https://www.coursera.org/learn/data-analysis-r#modules)
- [Duke University/Coursera: Data Analysis with R Specialization](https://www.coursera.org/specializations/statistics)





## Exkurs


[Dall-E 2](https://openai.com/dall-e-2/) ist eine KI, die "realistische Bilder und Kunst aus einer Beschreibung in nat√ºrlicher Sprache" erstellt.^[<Dall-E 2>]


>   üë®‚Äçüè´ I'd like a mixture between robot und professor, in oil painting


>    ü§ñ ... s. @fig-mix-rob-prof



![Bild erzeugt von k√ºnstlicher Intelligenz, Quelle: DALL-E 2, 2023-02-09](img/mix-prof-robot.png){#fig-mix-rob-prof width="50%"}

:::{.callout-note}
Der Nutzen k√ºnstlicher Intelligenz f√ºr die Datenanalyse ist nat√ºrlich breiter:
Wenn Sie sich z.B. √ºber die Syntax eines bestimmten Befehls (oder allgemeiner: Vorhabens) nicht sicher sind, fragen Sie sich doch mal einen Bot wie ChatGPT.
::: 

## Literaturhinweise


@sauer_moderne_2019, Kap. 7, gibt eine Einf√ºhrung in die Datenaufbereitung (mit Hilfe von R), √§hnlich zu den Inhalten dieses Kapitels.
Mehr in die Tiefe des "Datenjudo" f√ºhren @wickham_r_2018;
der Autor Hadley Wickham ist die Leitfigur in der R-Community schlechthin. Kap. 5 behandelt (etwas ausf√ºhrlicher) die Themen dieses Kapitels.
Er ist einer der Hauptautoren von den beliebten R-Paketen `dplyr` und `ggplot2`.


Wer sich tiefer in das Datenjudo mit dem Tidyverse einarbeiten m√∂chte,
dem sei z.B. dieser [Kurs](https://www.datacamp.com/courses/introduction-to-the-tidyverse) empfohlen.^[<https://www.datacamp.com/courses/introduction-to-the-tidyverse>]



## Literatur



