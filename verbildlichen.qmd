# Daten verbildlichen



```{r}
#| message: false
#| echo: false
library(tidyverse)
library(easystats)
library(anglr)
library(maptools)
library(plotly)
```





## Lernsteuerung




### Standort im Lernpfad

Abb. @fig-ueberblick zeigt den Standort dieses Kapitels im Lernpfad und gibt damit einen √úberblick √ºber das Thema dieses Kapitels im Kontext aller Kapitel.







### Lernziele


- Sie k√∂nnen erl√§utern, wann und wozu das Visualisieren statistischer Inhalte sinnvoll ist.
- Sie kennen typische Arte von Datendiagrammen.
- Sie k√∂nnen typische Datendiagramme mit R visualisieren.
- Sie k√∂nnen zentrale Ergebnisse aus Datendiagrammen herauslesen.


### Ben√∂tigte R-Pakete

```{r}
#| message: false
library(tidyverse)
library(easystats)
library(DataExplorer)  # nicht vergessen zu installieren
```


```{r}
#| echo: false
theme_set(theme_minimal())

```





### Wozu das alles?





::: {.content-visible unless-format="pdf"}

<iframe src="https://giphy.com/embed/3oriNSf2iLjMVO7dao" width="480" height="244" frameBorder="0" class="giphy-embed" allowFullScreen></iframe><p><a href="https://giphy.com/gifs/culture--meme-kermit-3oriNSf2iLjMVO7dao">. Quelle: GIPHY</a></p>


:::

>   ü•∑ Wir m√ºssen die Galaxis verteidigen, Kermit

>   üê∏ *Schlock*






## Ein Dino sagt mehr als 1000 Worte

Es hei√üt, ein Bild sage mehr als 1000 Worte. Schon richtig, aber ein Dinosaurier sagt auch mehr als 1000 Worte,
s. @fig-dino1.



::: {.content-visible unless-format="pdf"}

![Dinosaurier und Kreis: Gleiche statistischen Kennwerte](img/dino-corr.gif){#fig-dino1}

:::{.xsmall}
[Quelle](https://towardsdatascience.com/how-to-turn-a-dinosaur-dataset-into-a-circle-dataset-with-the-same-statistics-64136c2e2ca0)
:::

In @fig-dino1 sieht man zwei verschiedene "Bilder", also Datens√§tze: einmal einen Dino und einmal einen Kreis.
Obwohl die Bilder grundverschiedene sind, sind die zentralen statistischen Kennwerte (praktisch) identisch.

:::



::: {.content-visible unless-format="html"}

![Anscombes Quartet: Gleiche statistischen Kennwerte in vier Datens√§tzen](img/anscombe.png){#fig-dino1}

:::{.xsmall}
[Quelle](https://en.wikipedia.org/wiki/Anscombe%27s_quartet)
:::

:::









Die Idee stammt von @Anscombe1973. [Hier](https://de.wikipedia.org/wiki/Anscombe-Quartett) ist ein weiteres Beispiel (von Anscombe),
das zeigt, dass Bilder mehr zeigen als typische Statistiken es verm√∂gen.




Unter visueller Cortex ist sehr leistungsf√§hig. Wir k√∂nnen ohne M√ºhe eine gro√üe Anzahl
an Informationen aufnehmen und parallel verarbeiten.
Aus diesem Grund sind Datendiagramme eine effektive und einfache Art,
aus Daten Erkenntnisse zu ziehen.



::: {.callout-tip}
Nutzen Sie Datendiagramme umfassend; sie sind einfach zu verstehen und doch sehr m√§chtig.
:::


::: {def-datendiagramm}
### Datendiagramm
Ein *Datendiagramm* (kurz: Diagramm) ist ein Diagramm, das Daten und Statistiken zeigt, mit dem Zweck,
Erkenntnisse daraus zu ziehen.
:::



:::{#exm-datendiagramm}

### Aus der Forschung: Ein aufw√§ndiges (und ansprechendes) Datendiagramm

[Hier](https://besjournals.onlinelibrary.wiley.com/cms/asset/22fa2646-002f-4890-800d-2717cc12bce8/jane13070-fig-0002-m.jpg) finden Sie ein Beispiel f√ºr ein Datendiagramm,
 das mit R erzeugt wurde [@scherer_seasonal_2019].
:::

 


### Ein Bild hat nicht so viele Dimensionen


@fig-many-dims zeigt ein Bild mit mehreren Variablen.
Wie man (nicht) sieht, wird es langsam un√ºbersichtlich.
Offenbar kann man in einem Bild nicht beliebig viele Variablen reinquetschen.
Die "Dimensionalit√§t" eines Diagramms hat ihre Grenzen,
vielleicht bei 4-6 Variablen.

```{r}
#| echo: false
#| label: fig-many-dims
#| fig-cap: "Ein Diagramm kann nur eine begrenzte Anzahl von Variablen zeigen"

data(mariokart, package ="openintro")

mariokart |> 
  filter(total_pr < 100) |> 
  ggplot(aes(x = duration, y = total_pr, color = cond, size = wheels, shape = stock_photo)) +
  geom_point()
```

M√∂chten wir den Zusammenhang von vielen Variablen, z.B. mehr als 5, verstehen,
kommen wir mit Bildern nicht weiter.
Dann brauchen wir andere Werkzeuge: statistics to the rescue.


:::{.callout-note}
Bei klaren Zusammenh√§ngen und wenig Variablen braucht man keine (aufw√§ndige) Statistik.
Ein Bild (Datendiagramm) ist dann (oft) ausreichend.
Man k√∂nnte sagen, dass es Statistik nur deshalb gibt, weil unser Auge mit mehr als ca. 4-6 Variablen nicht gleichzeitig umgehen kann.
:::

:::{#exr-anz-dims}
Wie viele Variablen sind in @fig-many-dims dargestellt?^[5]
:::


Eine weitere M√∂glichkeit, mehr Variablen in einem Diagramm unterzubringen,
ist die "Flatlands" zu verlassen, also von 2D auf 3D zu wechseln, s. @fig-3d-germany.

```{r}
#| echo: false
#| message: false
data(wrld_simpl)


map1 <- subset(wrld_simpl,
               NAME %in% c("Germany"))
map1 <- wrld_simpl

## DEL model (like TRI in silicate)
delmesh <-  anglr::globe(anglr::DEL(map1, max_area = 0.5))
mesh <- as.mesh3d(delmesh)


# plot point cloud
x <- mesh$vb[1,]
y <- mesh$vb[2, ]
z <- mesh$vb[3,]
m <- matrix(c(x,y,z), ncol=3, dimnames=list(NULL,c("x","y","z")))

# colours in z don't make sense here, need to map object aesthetics above
zmean <- apply(t(mesh$it),MARGIN=1,function(row){mean(m[row,3])})

library(scales)
facecolor = colour_ramp(
  brewer_pal(palette="RdBu")(9)
)(rescale(x=zmean))

fig <- plot_ly(
  x = x, y = y, z = z,
  i = mesh$it[1,]-1, j = mesh$it[2,]-1, k = mesh$it[3,]-1,
  facecolor = facecolor,
  type = "mesh3d"
)
```



```{r}
#| echo: false
#| eval: !expr knitr:::is_html_output()
#| message: false
#| label: fig-3d-germany
#| fig-cap: "Eine 3D-Karte der Erde"
fig
```


[Quelle](https://plotly.com/r/trisurf/)



::: {.content-visible unless-format="pdf"}



Etwas weniger spektakul√§r, aber n√§her an der Datenanalyse ist @fig-mario-3d.


```{r}
#| echo: false
#| label: fig-mario-3d
#| fig-cap: "3D-Punktediagramm zum Datensatz mariokart"

fig2 <- plot_ly(mariokart, x = ~duration, y = ~n_bids, z = ~total_pr, color = ~cond, colors = c('#BF382A', '#0C4B8E'))
fig2 <- fig2 %>% add_markers()
fig2 <- fig2 %>% layout(scene = list(xaxis = list(title = 'duration'),
                     yaxis = list(title = 'number of bids'),
                     zaxis = list(title = 'total price')))


fig2
```


Leider ist @fig-mario-3d nicht sehr aufschlussreich.






Daraus kann man zweierlei lernen:

- Nicht jedes Datendiagramm (ist auf Anhieb) informativ.
- Die Daten m√ºssen ggf. erst umgeformt werden.

:::{#exr-mario3d}
Es gibt einen Extremwert im Diagramm. Finden Sie ihn?
:::


:::

## Nomenklatur von Datendiagrammen

@tbl-nom-plots zeigt eine - sehr kurze Nomenklatur - an Datendigrammen.^[Weitere Nomenklaturen sind m√∂glich, aber wir halten hier die Sache einfach.]

```{r}
#| echo: false
#| label: tbl-nom-plots
#| tbl-cap: "Ein (sehr kurze) Nomenklartur von Datendiagrammen"
nom_plots <-
  tribble(
~Erkenntnisziel, ~qualitativ, ~quantitativ,
"Verteilung", "Balkendiagramm"," Histogramm und Dichtediagramm",
"Zusammenhang", "gef√ºlltes Balkendiagramm", "Streudiagramm",
"Unterschied", "gef√ºlltes Balkendiagramm", "Boxplot")

nom_plots
```



:::{.callout-note}
Wir arbeiten hier mit dem Datensatz `mariokart`. Hilfe bzw. ein Data-Dictionary (Codebook) finden Sie [hier](https://www.rdocumentation.org/packages/openintro/versions/2.4.0/topics/mariokart).
:::

## Verteilungen verbildlichen

### Verteilung: nominale Variable

:::{#def-verteilung}
### Verteilung
Eine (H√§ufigkeits-)Verteilung einer Variablen $X$ schl√ºsselt auf, wie h√§ufig jede Auspr√§gung von $X$ ist.$\square$
:::

:::{#exm-verteilung1}
@tbl-wheels-n zeigt die H√§ufigkeitsverteilung von `cond` aus dem Datensatz `mariokart`.
Die Variable hat 5 Auspr√§gungen; z.b. kommt die Auspr√§gung `new`  59 mal vor.$\square$
:::



```{r}
#| echo: false
#| label: tbl-wheels-n
#| tbl-cap: "H√§ufigkeitsverteilung von `cond` aus dem Datensatz `mariokart`"

mariokart |> 
  count(cond)
```

Zugegeben, das Datendiagramm von `cond` ist nicht so aufregend, s. @fig-mario-n-plot-cond.
Wie man sieht, besteht so ein Diagramm als *Balken*, daher hei√üt es *Balkendiagramm*.
Man kann so ein Diagramm um 90¬∞ drehen, keine Ausrichtung ist unbedingt besser als die andere.


:::{#def-balken}
### Balkendiagramm
Ein Balkendiagramm eignet sich, um H√§ufigkeiten darzustellen
:::


```{r}
#| echo: false
#| label: fig-mario-n-plot-cond
#| fig-cap: "H√§ufigkeitsverteilung der Variable `cond`"

mario_n1 <-
  mariokart |> 
  count(cond) |> 
  ggplot(aes(y = n, x = cond)) + 
  geom_col() +
  coord_flip() +
  theme_minimal()

mario_n2 <-
  mariokart |> 
  count(cond) |> 
  ggplot(aes(y = n, x = cond)) + 
  geom_col()   +
  theme_minimal()

plots(mario_n1, mario_n2)
```


Es gibt viele Methoden, sich mit R ein Balkendiagramm ausgeben zu lassen.
Eine einfache, komfortable ist die mit dem Paket `DataExplorer`,
s. @fig-de1.


Zuerst importieren wir die Daten und starten das R-Paket `DataExplorer`, s. @lst-mariokart.

```{#lst-mariokart .r lst-cap="Mariokart-Daten importieren von einer Webseite"}
mariokart <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv")
```


Au√üerdem nicht vergessen, das Paket `DataExplorer` zu starten, s. @lst-dataexplorer.^[Nat√ºrlich m√ºssen Sie das Paket einmalig installiert haben, bevor Sie es starten k√∂nnen.]
In diesem Paket "wohnen" die Befehle, die wir zum Erstellen der Datendiagramme nutzen werden.


```{#lst-dataexplorer .r lst-cap="Wir starten das R-Paket DataExplorer"}
library(DataExplorer)
```




```{#lst-de2 .r lst-cap="Syntax zur Erstellung eines Histogramms"}
mariokart %>% 
  select(total_pr) %>% 
  filter(total_pr < 100) %>%  # ohne Extremwerte
  plot_histogram()
```



```{#lst-de1 .r lst-cap="Syntax zur Erstellung eines Balkendiagramms"}
mariokart %>% 
  select(cond) %>% 
  plot_bar()
```


Die Syntax ist in @lst-de1 abgedruckt. √úbersetzen wir die Syntax ins Deutsche:

```
Nimm den Datensatz mariokart *und dann*
  w√§hle die Spalte cond *und dann*
  zeichne ein Balkendiagramm.
```  

:::{#exr-de1}
### Spalten w√§hlen f√ºr das Balkendiagramm
H√§tten wir andere Spalten ausgew√§hlt, so w√ºrde das Balkendiagramm die Verteilung jener Variablen zeigen. Ja, Sie k√∂nnen auch mehrere Variablen auf einmal ausw√§hlen. Probieren Sie das doch mal aus!
:::


```{r}
#| label: fig-de1
#| echo: false
#| fig-cap: "Balkendiagramm mit dem R-Paket `DataExplorer`"
library(DataExplorer)
mariokart <- read.csv("https://vincentarelbundock.github.io/Rdatasets/csv/openintro/mariokart.csv")

mariokart %>% 
  select(cond) %>% 
  plot_bar()
```

<!-- So k√∂nnen Sie  -->


### Verteilung: quantitative Variable

#### Histogramm

Bei einer quantitativen Variablen mit vielen Auspr√§gungen w√§re ein Balkendiagramm nicht so aussagekr√§ftig, s. @fig-balken-total-pr. Es gibt einfach zu viele Auspr√§gungen.

```{r}
#| echo: false
#| fig-cap: "Balkendiagramm f√ºr `total_pr`"
#| label: fig-balken-total-pr

mariokart |> 
  filter(total_pr < 200) |> 
  mutate(total_pr = round(total_pr, digits = 1)) |> 
  ggplot(aes(x = total_pr)) +
  geom_bar()
```

Die L√∂sung: Wir reduzieren die Anzahl der Auspr√§gungen, in dem wir auf ganze Dollar runden.
Oder, um noch weniger Auspr√§gungen zu bekommen, k√∂nnen wir einfach Gruppen definieren, z.B.

- Gruppe 1: 0-5 Dollar
- Gruppe 2: 6-10 Dollar
- Gruppe 2: 11-15 Dollar
...


In @fig-balken-total-pr-hist sind z.B. die Auspr√§gungen des Verkaufspreis (`total_pr`) in in Gruppen der Breite von 5 Dollar aufgeteilt worden. Zus√§tzlich sind noch die einzelnen Werte als schwarze Punkte gezeigt.

```{r}
#| echo: false
#| fig-cap: "Balkendiagramm f√ºr `total_pr`"
#| label: fig-balken-total-pr-hist

m1a <- 
  mariokart |> 
  filter(total_pr < 100)

m1a |> 
  ggplot(aes(x = total_pr)) +
  geom_histogram(binwidth = 5, alpha = .7, center = 0, color = "white")  +
  geom_dotplot(binwidth = 1, method = "histodot") +
  labs(caption = paste0("n = ", nrow(m1a))) +
  scale_y_continuous(
    name = "Anzahl",
    sec.axis = sec_axis(trans = ~. / 141, name = "Anteil"))
```



:::{#def-histogramm}
#### Histogramm
Ein Histogramm ist ein Diagramm zur Darstellung der H√§ufigkeitsverteilung einer quantitativen Variablen. Die Daten werden in Gruppen (Klassen) eingeteilt, die dann durch einen Balken dargestellt sind.
Die H√∂he der Balken zeigt die H√§ufigkeit der Daten in dieser Gruppe/in diesem Balken^[bei konstanter Balkenbreite].
:::




Es gibt keine klare Regel, wie viele Balken in einem Histogramm stehen sollten.
Nur: Es sollten nicht sehr viele und nicht sehr wenig sein, s. @fig-zu-wenig-viele links bzw. @fig-zu-wenig-viele, rechts.


```{r}
#| echo: false
#| label: fig-zu-wenig-viele
#| layout-ncol: 2
#| fig-cap: "Nicht zu wenig und nicht zu vielle Balken im Balkendiagramm"
#| fig-subcap: 
#|   - "Zu viele Gruppen (Balken)"
#|   - "Zu wenige Gruppen (Balken)"

p_mario_zu_viele <- 
  mariokart |> 
  filter(total_pr < 100) |> 
  ggplot(aes(x = total_pr)) +
  geom_histogram(binwidth = 1) 

p_mario_zu_viele

p_mario_zu_wenige <- 
  mariokart |> 
  filter(total_pr < 100) |> 
  ggplot(aes(x = total_pr)) +
  geom_histogram(bins = 2) 

p_mario_zu_wenige
```


Zur Erstellung eines Histogramms k√∂nnen Sie die Syntax @lst-de2 n√ºtzen, vgl. @fig-de-hist-density, links. 




```{#lst-de2 .r lst-cap="Syntax zur Erstellung eines Histogramms"}
mariokart %>% 
  select(total_pr) %>% 
  filter(total_pr < 100) %>%  # ohne Extremwerte
  plot_histogram()
```


```{r}
#| echo: false
#| label: fig-de-hist-density
#| layout-ncol: 2
#| fig-cap: "Eine stetige Verteilung verbildlichen"
#| fig-subcap:
#|   - Histogramm
#|   - Dichtediagramm 

mariokart %>% 
  select(total_pr) %>% 
  filter(total_pr < 100) %>%  # ohne Extremwerte
  plot_histogram(ggtheme = theme_minimal())

mariokart %>% 
  select(total_pr) %>% 
  filter(total_pr < 100) %>%  # ohne Extremwerte
  plot_density(ggtheme = theme_minimal())
```



#### Dichtediagramm

@fig-balken-total-pr-hist-dens f√ºgt zu @fig-balken-total-pr-hist ein *Dichtediagramm* hinzu (rote Linie). Ein Dichtediagramm √§hnelt einem "glattgeschmirgeltem" Histogramm.


:::{#def-dichtediagramm}
#### Dichtediagramm
Ein Dichtediagramm visualisiert die Verteilung einer stetigen Variablen.
Im Gegensatz zum Histogramm wird der Verlauf der Kurve gegl√§ttet,
so kann Rauschen besser ausgeblendet werden.^[Mit *Dichte* ist die Anzahl der Beobachtungen pro Einheit der Variablen auf der X-Achse gemeint.]
:::



```{r}
#| echo: false
#| fig-cap: "Balkendiagramm f√ºr `total_pr`"
#| label: fig-balken-total-pr-hist-dens

m1a |> 
  ggplot(aes(x = total_pr, y = ..density..)) +
  geom_histogram(binwidth = 5, alpha = .7, center = 0)  +
  #geom_dotplot(binwidth = 1, method = "histodot") +
  geom_density(color = "red")
  #geom_dotplot(binwidth = 1, method = "histodot")
```



:::{#exr-plot-density}
Erstellen Sie das Diagramm @fig-de-hist-density, rechtes Teildiagramm!^[Grob gesagt: `mariokart %>% plot_density()`.]$\square$
:::



#### Eigenschaften von Verteilungen

(Diagramme von) Verteilungen k√∂nnen symmetrisch oder schief (nicht symmetrisch) sein, s. @fig-symm-schief.


```{r}
#| echo: false
#| label: fig-symm-schief
#| layout-ncol: 2
#| fig-cap: "Symmetrische vs. schiefe Verteilung, verbildlicht"
#| fig-subcap:
#|   - "Symmetrisch (Normal)"
#|   - "Schief"
p_norm <- 
  ggplot(NULL) +
  stat_function(fun = dnorm, args = list(mean = 0, sd = 1)) +
  scale_x_continuous(limits = c(-3, 3))

p_norm

ggplot(NULL) +
  stat_function(fun = dgamma, args = list(shape = 2, rate = 3))  +
  scale_x_continuous(limits = c(0, 3))
```


@fig-plot-distribs zeigt verschiedene Formen von Verteilungen.

```{r}
#| echo: false
#| label: fig-plot-distribs
#| fig-cap: "Verschiedene Verteilungsformen"
source("funs/plot-distribs.R")
p_distribs <- plot_distribs()
p_distribs
```


[Quelle: ifes/FOM Hochschule](https://github.com/FOM-ifes/VL-Vorlesungsfolien)


### Normalverteilung


Eine Normalverteilung sehen Sie in @fig-symm-schief, links. 
Sie hat u.a. folgende Eigenschaften:

- symmetrisch
- glockenf√∂rmig
- stetig
- eingipflig (unimodal)
- Mittelwert, Median und Modus sind identisch

:::{#exm-norm}
Beispiele f√ºr normalverteilte Variablen sind K√∂rpergr√∂√üe von M√§nnern oder Frauen, IQ-Werte, Pr√ºfungsergebnisse, Messfehler, Lebensdauer von Gl√ºhbirnen, Gewichte von Brotlaiben, Milchproduktion von K√ºhen, Brustumfang schottischer Soldaten [@lyon_why_2014].$\square$
:::



Die Normalverteilung ist von hoher Bedeutung, da  diese Verteilung unter (recht h√§ufigen) Bedingungen zwangsl√§ufig ergeben muss. Wenn sich eine Variable als Summe mehrerer, unabh√§ngiger, etwa gleich starker Summanden, dann kann man erwarten, dass sich diese Variable normalverteilt.
Dieses Ph√§nomen kann man gut anhand des [Galton-Bretts](https://www.youtube.com/watch?v=3m4bxse2JEQ) veranschaulichen.




::: {.content-visible unless-format="pdf"}

{{< video https://youtu.be/3m4bxse2JEQ >}}

:::



## Zusammenh√§nge verbildlichen

### Zusammenhang: nominale Variablen


:::{#exm-nom-zshg}
### Beispiele f√ºr Zusammenh√§nge bei nominalen Variablen

- H√§ngt Berufserfolg (F√ºhrungskraft ja/nein) mit dem Geschlecht zusammen?
- H√§ngt der Beruf des Vaters mit dem Schulabschluss des Kindes (Abitur, Realschule, Mittelschule) zusammen?
- Gibt es einen Zusammenhang zwischen Automarke und politische Pr√§ferenz einer Partei?
$\square$
:::


Sagen wir, Sie arbeiten immer noch beim Online-Auktionshaus und Sie fragen sich,
ob ein Produktfoto wohl prim√§r bei neuwertigen Produkten beiliegt, aber nicht bei gebrauchten?
Dazu betrachten Sie wieder die `mariokart`-Daten, s. @fig-zshg-nom1.



```{r}
#| echo: false
#| label: fig-zshg-nom1
#| fig-cap: "Zusammenhang zwischen nominalskalierten Variablen verbildlichen"
#| fig-subcap: 
#|   - "Es findet sich ein Zusammenhang von Foto und Zustand in den Daten"
#|   - "Es findet sich (fast) kein Zusammenhang von `wheel` und Foto in den Daten"
#| layout-ncol: 2
#| 
mariokart %>% 
  ggplot(aes(x = cond, fill = stock_photo)) +
  geom_bar(position = "fill") +
  scale_fill_viridis_d() +
  theme(legend.position = "bottom") +
  theme_minimal()

mariokart %>% 
  ggplot(aes(x = wheels > 0, fill = stock_photo)) +
  geom_bar(position = "fill") +
  scale_fill_viridis_d() +
  theme(legend.position = "bottom") +
  theme_minimal()
```

Tats√§chlich: Es findet sich ein Zusammenhang zwischen der Tatsache, ob dem versteigerten Produkt ein Foto bei lag und ob es neuwertig oder gebraucht war (@fig-zshg-nom1, links).
Bei neuen Spielen war fast immer (ca. 90%) ein Foto dabei. Bei
gebrauchten Spiel immerhin bei gut der H√§lfte der F√§lle.

Anders sieht es aus f√ºr die Frage, ob ein (oder mehrere) Lenkr√§der dem Spiel beilagen (oder nicht) in Zusammenhang mit der Fotofrage Hier gab es fast keinen Unterschied zwischen neuen und alten Spielen, was die Frage nach "Foto des Produkts dabei" betraf (@fig-zshg-nom1, rechts),
der Anteil betrug jeweils ca. 70%.

Anders gesagt: Unterscheiden sich die "F√ºllh√∂he" in den Diagrammen, so gibt es einen Unterschied hinsichtlich "Foto ist dabei" zwischen den beiden Gruppen (linker vs. rechter Balken).
Unterscheiden sich die Anteile in den Gruppen (neuwertige vs. gebrauchte Spiele), so spielt z.B. die Variable "Foto dabei" offenbar eine Rolle. Dann h√§ngen Neuwertigkeit und "Foto dabei" also zusammen!

So k√∂nnen Sie sich in R ein gef√ºlltes Balkendiagramm ausgeben lassen,
s. @fig-de-bar-filled.

```{r}
#| label: fig-de-bar-filled
#| fig-cap: "Ein gef√ºlltes Balkendiagramm zur Untersuchung eines Zusammenhangs zwischen nominalskalierter Variablen"
mariokart %>% 
  select(cond, stock_photo) %>% 
  plot_bar(by = "cond")
```


:::{.callout-note}
*Gef√ºllte Balkendiagramme* eignen sich zur Analyse eines Zusammenhangs zwischen nominalskalierten Variablen. Allerdings sollte eine der beiden Variablen nur zwei Auspr√§gungen aufweisen,
sonst sind die Zusammenh√§nge nicht mehr so gut zu erkennen.$\square$
:::



### Zusammenhang: metrisch


Den (etwaigen) Zusammenhang zweier metrischer Variablen kann man mit einem *Streudiagramm* visualisieren (engl. scatterplot). 
@fig-streu1 links untersucht den Zusammenhang des Einstiegpreises (X-Achse) und Abschlusspreises (Y-Achse) von Geboten bei Versteigerungen des Computerspiels Mariokart.
In dem Diagramm ist eine Ellipse erg√§nzt, um die Art des Zusammenangs besser zu verdeutlichen: Es handelt sich um einen *gleichsinnigen* (positiven) Zusammenhang:
Je h√∂her der Startpreis, desto *h√∂her* der Abschlusspreis, zumindest tendenziell.
Au√üerdem ist eine "Trendgerade" (Regressionsgerade) in blau eingezeichnet.
Diese Gerade liegt "mittig" in den Daten (wir definieren dies sp√§ter genauer).
Diese Trendgerade gibt Aufschluss √ºber "typische" Werte: Welcher Y-Wert ist "typisch" f√ºr einen bestimmten X-Wert?


@fig-streu1 rechts untersucht den Zusammenhang zwischen Anzahl der Gebote (X-Achse) und Abschlusspreises (Y-Achse).
Es handelt sich um einen negativen Zusammenhang: Je mehr Gebote, desto *geringer* der Abschlusspreis.



```{r}
#| message: false
#| echo: false
#| fig-cap: "Streudiagramm zur Darstellung eines Zusammenhangs zweier metrischer Variablen"
#| label: fig-streu1
#| fig-subcap:
#|   - "positiver, mittelstarker Zusammenhang"
#|   - "negativer, eher schwacher Zusammenhang"
#| layout-ncol: 2

library(ggpubr)
mariokart %>% 
  select(total_pr, start_pr) %>% 
  filter(total_pr < 100) %>% 
  filter(start_pr > 10) %>% 
  ggscatter(x = "start_pr", 
            y = "total_pr",
            add = "reg.line",
            add.params = list(color = "blue"),
            ellipse = TRUE)


mariokart %>% 
  #select(total_pr, start_pr) %>% 
  filter(total_pr < 100) %>% 
  filter(start_pr > 10) %>% 
  ggscatter(x = "n_bids", 
            y = "total_pr",
            add = "reg.line",
            add.params = list(color = "blue"),
            ellipse = TRUE)

```



@fig-cors bietet einen √úberblick √ºber verschiedene Beispiele von Richtung und St√§rke von Zusammenh√§ngen.

```{r}
#| message: false
#| echo: false
#| label: fig-cors
#| fig-cap: "√úberblick √ºber verschiedene Beispiele von Streudiagrammen"
#| out-width: "100%"
source("funs/plot-different-cors.R")
fig_cors <- plot_different_cors(plot_it = FALSE)
fig_cors
```


:::{.xsmall}
Quelle: Aufbauend auf FOM/ifes, Norman Markgraf
:::


In @fig-cors ist f√ºr jedes Teildiagramm eine Zahl angegeben: der *Korrelationskoeffizient*.
Diese Statistik quantifiziert Richtung und St√§rke des Zusammenhangs (mehr dazu in Kap. XXX).
Ein positives Vorzeichen steht f√ºr einen positiven Zusammenhang, ein negatives Vorzeichen f√ºr einen negativen Zusammenhang.
Der (Absolut-)Wert gibt die St√§rke des linearen Zusammenhangs an [@cohen_power_1992]:

- ¬±0: Kein Zusammenhang
- ¬±0.1: schwacher Zusammenhang
- ¬±0.3: mittlerer Zusammenhang
- ¬±0.5: starker Zusammenhang
- ¬±1: perfekter Zusammenhang


@fig-cors2 hat die gleiche Aussage, ist aber plakativer, 
indem *St√§rke* (schwach, stark) und *Richtung* (positiv, negativ) gegen√ºbergestellt sind.

```{r}
#| message: false
#| echo: false
#| label: fig-cors2
#| fig-cap: "√úberblick √ºber starke vs. schwache bzw. positive vs. negative Zusammenh√§nge"
#| out-width: "100%"
source("funs/plot-different-cors.R")
fig_cors2 <- plot_different_cors(plot_it = FALSE, short = TRUE)
fig_cors2
```


Man sieht in @fig-cors und @fig-cors2, dass ein *negativer* Korrelationskoeffizient mit einer *absinkenden* Trendgerade (blaue Linie) einhergeht.
Umgekehrt geht ein *positiver* Trend mit einer *ansteigenden* Trendgerade einher.
Zweitens erkennt man, dass *starke* Zusammenh√§nge mit einer *schmaler* Ellipse einhergehen
und *schwache* Zusammenh√§nge mit einer *breiten* Ellipse einhergehen.





:::{#def-zshg}
### Richtig und St√§rke eines Zusammenhang

Gleichsinnige (positive) Zusammenh√§nge erkennt man an aufsteigenden Trendgeraden;
gegensinnigen (negative) Zusammenh√§nge an absteigenden Trendgeraden:

- ‚ûï  : ‚¨ÜÔ∏è
- ‚ûñ :   ‚¨áÔ∏è

Starke Zusammenh√§nge erkennt man an schmalen Ellipsen ("Baguette");
schwache Zusammenh√§nge an breiten Ellipsen ("Torte"):

- schwach: ü•Æ 
- stark: ü•ñ

$\square$
:::



:::{.callout-caution}
Ein Zusammenhang der Art "je mehr X, desto mehr Y" ist *linear*. 
Lineare Zusammenh√§nge erkennt man im Diagramm an einer Geraden bzw. inwieweit sich die Punkte an einer Geraden "anschmiegen".
Nat√ºrlich k√∂nnte man auch nicht-lineare Zusammenh√§nge untersuchen,
aber der Einfachheit halber begn√ºgen wir uns mit linearen.$\square$
:::



:::{#exm-scatter}
Sie arbeiten nach wie vor bei einem Online-Auktionshaus, und machmal geh√∂rt Datenanalyse zu Ihren Aufgaben.
Daher interessiert Sie, ob welche Variablen mit dem Abschlusspreis (`total_pr`) im Datensatz `mariokart` zusammenh√§ngen.
Sie verbildlichen die Daten mit R, und zwar nutzen Sie das Paket `DataExplorer`.
Starten Sie dieses Paket, s. @lst-dataexplorer.
Au√üerdem m√ºssen wir noch die Daten importieren, falls noch nicht getan, s. @lst-mariokart.

So, jetzt kann die eigentliche Arbeit losgehen.
Da Sie sich nur auf metrische Variablen konzentrieren wollen, 
w√§hlen Sie (mit `select`) nur diese Variablen aus.
Dann weisen Sie R an, einen Scatterplot zu malen (`plot_scatterplot`) und zwar
jeweils den Zusammenhang einer der gew√§hlten Variablen mit dem Abschlusspreis (`total_pr`),
da das die Variable ist, die Sie prim√§r interessiert.
Das Ergebnis sieht man in @fig-mario-scatter.


```{r}
#| label: fig-mario-scatter
#| fig-cap: Der Zusammenhang metrischer Variablen mit Abschlusspreis
mariokart %>% 
  select(duration, n_bids, start_pr, ship_pr, total_pr, seller_rate, wheels) %>% 
  plot_scatterplot(by = "total_pr")
```


Aha... Was sagt uns das Bild? Hm. Es scheint einige Extremwerte zu geben, die 
daf√ºr sorgen, dass der Rest der Daten recht zusammengequetscht auf dem Bild erscheint.
Vielleicht sollten Sie solche Extremwerte lieber entfernen?
Sie entscheiden sich, nur Verk√§ufe mit einem Abschlusspreis von weniger als 150 Dollar anzuschauen (`total_pr < 100`).
Das Ergebnis ist in @fig-mario-scatter2 zu sehen.



```{r}
#| label: fig-mario-scatter2
#| fig-cap: Der Zusammenhang metrischer Variablen mit Abschlusspreis
mariokart2 <-
  mariokart %>% 
  filter(total_pr < 100)

mariokart2 %>% 
  select(duration, n_bids, start_pr, ship_pr, total_pr, seller_rate, wheels) %>% 
  plot_scatterplot(by = "total_pr")
```


Ohne Extremwerte sch√§lt sich ein deutlicheres Bild (@fig-mario-scatter2) hervor: Startpreis (`start_pr`) und Anzahl  der R√§der (`wheels`) scheinen am st√§rksten mit dem Abschlusspreis zusammenzuh√§ngen.

Das Argument `by = "total_pr"`) bei `plot_scatterplot` weist R an, als Y-Variable stets `total_pr` zu verwenden. Alle √ºbrigen Variablen kommen jeweils einmal als X-Variable vor.$\square$

:::




## Unterschiede verbildlichen

### Unterschied: nominale Variablen


Gute Nachrichten: F√ºr nominale Variablen bieten sich Balkendiagramme sowohl zur Darstellung von Zusammenh√§ngen als auch von Unterschieden an. Genau genommen zeigt ja @fig-zshg-nom1 (links) den *Unterschied* zwischen neuen und gebrauchten Spielen hinsichtlich der Frage, ob Photos beiliegen. Und wie man in @fig-zshg-nom1 sieht, ist der Anteil der Spiele mit Foto bei den neuen Spielen h√∂her als bei gebrauchten Spielen.









### Unterschied: quantitative Variablen


Eine typische Analysefrage ist, ob sich zwei Gruppen hinsichtlich einer metrischen Zielvariablen deutlich unterscheiden. Genauer gesagt untersucht man z.B. oft, ob sich die Mittelwerte der beiden Gruppen zwischen der Zielvariablen deutlich unterscheiden. Das h√∂rt sich abstrakt an? Am besten wir schauen uns einige Beispiele an, s. @fig-compare-groups1.


```{r}
#| echo: false
#| fig-cap: "Unterschiede zwischen zwei Gruppen: Metrische Y-Variable, nominale X-Variable"
#| fig-subcap:
#|   - "Histogramm pro Gruppe"
#|   - "Boxplot pro Gruppe"
#| label: fig-compare-groups1
#| message: false
#| layout-ncol: 2

ggplot(mariokart2, aes(x = cond, y = total_pr)) +
  geom_violinhalf() +
  theme_minimal()


ggplot(mariokart2, aes(x = cond, y = total_pr)) +
  geom_boxplot() +
  theme_minimal()
```



Das linke Teildiagramm von @fig-compare-groups1 zeigt das Histogramm von `total_pr`, getrennt f√ºr neue und gebrauchte Spiele, vgl. @fig-de-hist-density.
Das rechte Teildiagramm zeigt die gleichen Verteilungen, aber mit einer vereinfachten, groberen Darstellungsfrom, den *Boxplot*.


```{r}
#| echo: false
#| fig-cap: "Unterschiede zwischen zwei Gruppen: Metrische Y-Variable, nominale X-Variable"
#| fig-subcap:
#|   - "Y: Abschlusspreis, X: Zustand"
#|   - "Y: Abschlusspreis, X: Photo dabei?"
#| label: fig-compare-groups
#| layout-ncol: 2
mariokart %>% 
  filter(total_pr < 100) %>% 
  ggpubr::ggboxplot(., x = "cond", y = "total_pr")

mariokart %>% 
  filter(total_pr < 100) %>% 
  ggpubr::ggboxplot(., x = "stock_photo", y = "total_pr")

```



Das linke Teildiagramm von @fig-compare-groups zeigt den Unterschied in den Verteilungen von `total_pr`, einmal f√ºr die neuen Computerspiele (`cond == new`) und einmal f√ºr gebrauchte Spiele (`cond == used`).


:::{#def-boxplot}

### Boxplot
Der Boxplot ist eine Vereinfachung bzw. eine Zusammenfassung eines Histograms.^[Ob der Boxplot horizontal oder vertikal steht, ist Ihrem Geschmack √ºberlassen.]
Damit stellt der Boxplot auch eine Verteilung (einer metrischen Variablen) dar.$\square$
:::


In @fig-hist-to-box sieht man die "√úbersetzung" von Histogramm (oben) zu einem Boxplot (unten).



```{r}
#| label: fig-hist-to-box
#| fig-cap: "√úbersetzung eines Histogramms zu einem Boxplot"
#| message: false
#| echo: false
source("funs/histogram-to-boxplot.R")
hist_to_box <- histogram_to_boxplot(mariokart2, "total_pr", plot_it = FALSE)
hist_to_box
```





Schauen wir uns die "Anatomie" des Boxplots n√§her an:

1. Der *dicke Strich* in der Box zeigt den Median der Verteilung 
2. Die *Enden der Box* zeigen das 1. Quartil bzw. das 3. Quartil. Damit zeigt die Breite der Box die Streuung der Verteilung an, genauer gesagt die Streuung der inneren 50% der Beobachtungen. Je breiter die Box, desto gr√∂√üer die Streuung. Die Breite der Box nennt man auch den *Interquartilsabstand* (IQR), da er die Strecke zwischen den Quartilen bemisst.
3. Die "*Antennen*" des Boxplots zeigen die Streuung in den kleinsten 25% der Werte (linke Antenne) bzw. die Streuung der gr√∂√üten 25% der Werte (rechte Antennen). Je l√§nger die Antenne, desto gr√∂√üer die Streuung.
4. Falls es aber *Extremwerte* gibt, so sollten die lieber einzeln, separat, au√üerhalb der Antennen gezeigt werden. Daher ist die Antennenl√§nge auf die 1,5-fache L√§nge der Box beschr√§nkt. Werte die au√üerhalb dieses Bereichs liegen (also mehr als das 1,5-fache der Boxl√§nge von Q3 entfernt sind) werden mittels eines Punktes dargestellt.
5. Liegt der Median-Strich in der Mitte der Box, so ist die Verteilung *symmetrisch* (bezogen auf die inneren 50% der Werte), liegt der Median-Strich nicht in der Mitte der Box, so ist die Verteilung nicht symmetrisch (*schief*). Gleiches gilt f√ºr die Antennenl√§ngen: Sind die Antennen gleich lang, so ist der √§u√üere Teil der Verteilung symmetrisch, andernfalls schief.


:::{#exm-Boxplots}

In einer vorherigen Analyse haben Sie den Zusammenhang von Abschlusspreis und der Anzahl der Lenkr√§der untersucht.
Jetzt m√∂chten Sie eine sehr √§hnliche Fragestellung betrachten:
Wie *unterscheiden* sich die Verkaufspreise je nach Anzahl der beigelegten Lenkr√§der?
Flink erstellen Sie dazu folgendes Diagramm, @fig-box-wheels1, links.
Es zeigt die Verteilung des Abschlusspreises, aufgebrochen nach Anzahl Lenkr√§der (`by = "wheels`).


Aber ganz gl√ºcklich sind Sie mit dem Diagramm nicht: 
R hat die Variable `wheels` komisch aufgeteilt. Es w√§re eigentlich ganz einfach,
wenn R die Gruppen `0`, `1`, `2`, `3` und `4` aufteilen w√ºrde.
Aber schaut man sich die Y-Achse (im linken Teildiagramm von @fig-box-wheels1) an,
so erkennt man, dass R `wheels` als stetige Zahl betrachtet und nicht in ganze Zahlen gruppiert.^[Vielleicht so, dass in jeder Gruppe gleich viele Wert sind?] 
Aber wir m√∂chten jeden einzelnen Wert von `wheels` (0, 1, 2, 3, 4) als *Gruppe* verstehen.
Mit anderen Worten, wir m√∂chten `wheels` als nominale Variable definieren.
Das kann man mit dem Befehle `factor(wheels)` erreichen (verpackt in `mutate`), s.
@fig-box-wheels1, rechts.

```{r}
#| label: fig-box-wheels1
#| fig-cap: "Abschlusspreis nach Anzahl von beigelegten Lenkr√§dern"
#| fig-subcap: 
#|   - "wheels als metrische Variable"
#|   - "wheels als nominale Variable"
#| layout-ncol: 2
mariokart2 %>% 
  select(total_pr, wheels) %>% 
  plot_boxplot(by = "wheels")

mariokart2 %>% 
  select(total_pr, wheels) %>% 
  mutate(wheels = factor(wheels)) %>% 
  plot_boxplot(by = "wheels")
```

Sie schli√üen aus dem Bild, dass Lenkr√§der und Preis (positiv) zusammenh√§ngen.
Allerdings scheint es wenig Daten f√ºr `wheels == 4` zu geben.
Das pr√ºfen Sie nach:

```{r}
mariokart2 %>% 
  count(wheels)
```

Tats√§chlich gibt es (in `mariokart2`) auch f√ºr 3 Lenkr√§der schon wenig Daten,
so dass wir die Belastbarkeit dieses Ergebnisses skeptisch betrachten sollten.$\square$

:::





## So l√ºgt man mit Statistik

Diagramme werden h√§ufig eingesetzt, um die Wahrheit "aufzuh√ºbschen". 


### Achsen manipulieren

Achsen zu stauchen ist ein einfacher Trick, s. @fig-lie1.


```{r}
#| echo: false
#| label: fig-lie1
#| fig-cap: "Stauchen der Y-Achse, um mit Statistik zu l√ºgen"
#| fig-subcap: 
#|   - "Oh nein, dramatischer Einbruch des Umsatzes!"
#|   - "Kaum der Rede wert, ist nur ein bisschen Schwankung!"
#| layout-ncol: 2
#| 
d <- tibble(
  Jahr = c(1, 2, 3, 4, 5),
  Umsatz = c(100, 98, 94, 93, 70)
)



ggplot(d, aes(Jahr, Umsatz)) +
  geom_point(alpha = .7) +
  geom_line() +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 100)) +
   coord_fixed(ratio = .10)

ggplot(d, aes(Jahr, Umsatz)) +
  geom_point(alpha = .7) +
  geom_line() +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 100)) +
  coord_fixed(ratio = .010)

```


Nat√ºrlich kann man auch durch "Abschneiden" der Y-Achse einen eindrucksvollen Effekt erzielen, s. @fig-lie2.




```{r}
#| echo: false
#| label: fig-lie2
#| fig-cap: "Abschneiden der Y-Achse, um mit Statistik zu l√ºgen"
#| fig-subcap: 
#|   - "Oh nein, dramatischer Einbruch des Umsatzes!"
#|   - "Kaum der Rede wert, ist nur ein bisschen Schwankung!"
#| layout-ncol: 2

d <- tibble(
  Jahr = c(1, 2, 3, 4, 5),
  Umsatz = c(100, 98, 94, 93, 70)
)

ggplot(d, aes(Jahr, Umsatz)) +
  geom_point(alpha = .7) +
  geom_line() +
  theme_minimal()



ggplot(d, aes(Jahr, Umsatz)) +
  geom_point(alpha = .7) +
  geom_line() +
  theme_minimal() +
  scale_y_continuous(limits = c(0, 100))
```




### Scheinkorrelation


@messerli_chocolate_2012 berichtet von einem Zusammenhang von Schokoloadenkonsum und Anzahl von Nobelpreisen (Beobachtungseinheit: L√§nder), s. @fig-choc.
Das ist doch ganz klar: Schoki futtern macht schlau und Nobelpreise! (?)

![Schokolodenkonsum und Nobelpreise](img/choc.jpeg){#fig-choc width="75%"}


Leider ist hier von einer *Scheinkorrelation* auszugehen: Auch wenn die beiden Variablen *Schokoladenkonsum* und *Nobelpreise* zusammenh√§ngen, hei√üt das *nicht*, dass die Variable die Ursache und die andere die Wirkung sein muss. 
So k√∂nnte auch eine Drittvariable im Hintergrund die gleichzeitige Ursache von Schokoladenkonsum und Nobelpreise sein, etwa der *allgemeine Entwicklungsstand* des Landes: In h√∂her entwickelten L√§ndern wird mehr Schokoloade konsumiert und es werden mehr Nobelpreise gewonnen im Vergleich zu L√§ndern mit geringerem Entwicklungsstand.






## Praxisbezug


Ein, wie ich finde schlagendes Beispiel zur St√§rke von Datendiagrammen ist @fig-vaccine.
Das Diagramm zeigt die H√§ufigkeit von Masern, vor und nach der Einf√ºhrung der Impfung.
Die Daten und die Idee zur Visualisierung gehen auf @van_panhuis_contagious_2013 zur√ºck.
Das Diagramm und weitere finden sich in √§hnlicher Form imn [Wall Street Journal](http://graphics.wsj.com/infectious-diseases-and-vaccines/).


![H√§ufigkeit von Masern und Impfung in den USA, Lizenz: MIT](img/vaccine.jpg){#fig-vaccine width=75%}

[Quellcode](https://github.com/blmoore/blogR/blob/master/R/measles_incidence_heatmap.R)
[Datenquelle](https://www.tycho.pitt.edu)




In der "freien Wildbahn" findet man h√§ufig sog. "Tortendiagramme".
Zwar sind sie beliebt, doch ist [von ihrer Verwendung abzuraten](https://www.data-to-viz.com/caveat/pie.html); vgl. auch [hier](https://github.com/cxli233/FriendsDontLetFriends#10-friends-dont-let-friends-make-pie-chart).





## Vertiefung


Mehr zu `{DataExplorer}` finden Sie [hier](https://boxuancui.github.io/DataExplorer/index.html).



::: {.content-visible unless-format="pdf"}
Eine weitere n√ºtzliche Art von Visualisierung sind Karten und Animationen. So zeigt z.B. @fig-le-world die Ver√§nderung der Lebenserwartung (in Jahren) √ºber die letzten Dekaden.

![Animation zur Ver√§nderung der Lebenserwartung](img/life-exp-world.gif){#fig-le-world width="75%"}

Der Quellcode der Animination ist [hier](https://gist.github.com/rafapereirabr/0d68f7ccfc3af1680c4c8353cf9ab345) zu finden.



In einigen Situation k√∂nnen Animationen zweckdienlich sein.
Au√üerdem sind sie mitunter nett anzuschauen, s. @fig-anim1.

![Ver√§nderung des Zusammenhangs von Lebenswertung und Bruttosozialprodukt pro Land, gegliedert nach Kontinenten](img/animate1.gif){#fig-anim1 width="75%"}

:::

Nat√ºrlich sind der Fantasie keine Grenzen beim Visualisieren gesetzt, so ist etwa [diese Animationen](https://www.tylermw.com/wp-content/uploads/2019/06/featuredmeasles.mp4) ziemlich atemberaubend.

Einen √úberblick √ºber verschiedene Typen an Diagrammen, sogar in Form einer systematischen Nomenklatur findet sich bei [data-to-vis](https://www.data-to-viz.com/).


Ein Teil der Diagramm dieses Kapitels wurden mit dem R-Paket [ggpubr](https://rpkgs.datanovia.com/ggpubr/) erstellt.
Mit diesem Paket lassen sich einfach ansprechende Datendiagramme erstellen,
so lautet die etwa die Syntax von @fig-compare-groups wie folgt.




```{r}
#| eval: false
library(ggpubr)  # einmalig instalieren nicht vergessen
ggboxplot(mariokart2, x = "cond", y = "total_pr")
```



M√∂chte man Mittelwerte vergleichen, so sind Boxplots nicht ideal, 
da diese ja nicht den Mittelwert, sondern den Median heraustellen.
Eine Abhilfe (also eine Darstellung des Mittelwerts) schafft man (z.B.) mit `ggpubr`,
s. @fig-comp-means-ggpubr.


```{r}
#| label: fig-comp-means-ggpubr
#| fig-cap: Vergleich der Verteilungen zweier Gruppen mit Mittelwert und Standardabweichung pro Gruppe hervorgehoben
ggviolin(mariokart2, x = "cond", y = "total_pr",
         add = "mean_sd") 
```

Ein "Violinenplot" hat die gleiche Aussage wie ein Dichtediagramm:
Je breiter die "Violine", desto mehr Beobachtungen gibt es an dieser Stelle.
Weitere Varianten zum Violinenplot mit ggpubr finden sich [hier](https://rpkgs.datanovia.com/ggpubr/reference/ggviolin.html).




Sowohl `ggpubr` als auch `DataExplorer` (und viele andere R-Pakete) bauen auf dem R-Paket `ggplot2` auf.
`ggplot2` ist eines der am weitesten ausgearbeiteten Softwarepakete zur Erstellung von Datendiagrammen.
Das Buch zur Software (vom Autor von `ggplot2`) ist empfehlenswert [@wickham_ggplot2_2009].
Eine neue, gute Einf√ºhrung in Datenvisualisierung findet sich bei @wilke_fundamentals_2019.
Beide B√ºcher sind kostenfrei online lesbar.


√úbrigens sind Modelle - und Diagramme sind Modelle - immer eine Vereinfachung,
lassen also Informationen weg.
Manchmal auch wichtige Informationen. [Dieses Beispiel](https://www.autodesk.com/research/publications/same-stats-different-graphs) zeigt, wie etwa Histogramme wichtige Informationen unter den Tisch fallen lassen.



>   üßë‚Äçüéì Ich w√ºrde gerne mal Beispiele von *schlechten* Datendiagrammen sehen.

>   üë®‚Äçüè´ Auf der Seite von [Flowingdata](https://flowingdata.com/category/visualization/ugly-visualization/) findet sich eine nette Liste mit schlechten Datendiagrammen.





## Aufgaben


1. [boxhist](https://datenwerk.netlify.app/posts/boxhist/boxhist.html)
2. [max-corr1](https://datenwerk.netlify.app/posts/max-corr1/max-corr1.html)
4. [max-corr2](https://datenwerk.netlify.app/posts/max-corr2/max-corr2.html)
3. [Histogramm-in-Boxplot](https://datenwerk.netlify.app/posts/histogramm-in-boxplot/histogramm-in-boxplot)
4. [Diamonds-Histogramm-Vergleich2](https://datenwerk.netlify.app/posts/diamonds-histogramm-vergleich2/diamonds-histogramm-vergleich2)
6. [Boxplot-Aussagen](https://datenwerk.netlify.app/posts/boxplot-aussagen/boxplot-aussagen)
7. [boxplots-de1a](https://datenwerk.netlify.app/posts/boxplots-de1a/boxplots-de1a.html)
9. [movies-vis1](https://datenwerk.netlify.app/posts/movies-vis1/movies-vis1.html)
10. [movies-vis2](https://datenwerk.netlify.app/posts/movies-vis2/movies-vis2.html)



## Literatur




